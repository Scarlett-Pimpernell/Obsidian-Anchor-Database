--MS_Obsidian_Date_Time_Part_Extractor_Parser

--COMMENTS:
--This is a sub-algorithm from a larger more important Obsidian Partition Map-Reduce Learning algorithm...
--I have decided to pre-release it as a standalone, as I belive it has major even while standing on its own...
--Work it out for yourself this time folks... You should only need to touch the following global variables: 1. @Reomve_Duplicates; 2. @Data...
--Oh, and BTW, I have not tested the exception handling feature!!!... Please check all the edgecases yourself, before using this algorithm in business critical production usecases!!!...


--GLOBAL VARIABLES
Declare @Remove_Duplicates As Tinyint
Set @Remove_Duplicates = 0 --If you want to remove duplicates, assign a value of one (1)... Otherwise, assign a value of zero (0)...

-----
--Be very careful with changing these delimiters... I found that for example some characters may need to be escaped, but especially because the dash character is used to indicate ranges, if you want to use a dash as a delimiter character in your date @Data arguments, it must go as the first 'Like' character in the compound search string... There may be other characters that require this kind of sensitive handling!...
Declare @Date_Part_Delimiter_Character Varchar(1)
Set @Date_Part_Delimiter_Character = '-'
Declare @Date_Time_Delimiter_Character Varchar(1)
Set @Date_Time_Delimiter_Character = ' '
Declare @Magnitudinal_Time_Delimiter_Character Varchar(1)
Set @Magnitudinal_Time_Delimiter_Character = ':'
Declare @Precisional_Time_Delimiter_Character Varchar(1)
Set @Precisional_Time_Delimiter_Character = '.'
-----

Declare @Data Table ([Data] Varchar(Max))
Insert Into @Data ([Data])
Values --Please remember that there is an inbuilt datetime2 range that you must make sure your input arguments sit within... Other the algorithm behaviour may be unstable... Also, please make sure where possible that leading zeroes are added to all necessary dateparts (We actually automatically 'accommodate' this for you, but its simply nicer to have clean input data where easy and possible!!!)...
('0001-01-01 0:00:00.0'),
('0332-1-20'),
('090-08-11 15:00:01.116749'),
('4-02-25 15:00:0.1142'),
('1-09-18 15:00:0.51123'),
('0001-01-2 15:0:01.572'),
('9999-12-31 00:00:00.00'),
('2003-5-6 10:10:42.8493059'),
('1-09-18 15:00:00.54321'),
('14:15:16.1425367'),
('7:04:39'),
('20:01:9'),
('2000-3-1'),
('9:0:42.6'),
('4:05:3.6'),
('1-09-18 15:00:00.54321'),
('2019-04-06 03:50:09')

-----Intrinsic SQL Server System Constants
Declare @Days_Of_the_Month Table ([Month] Varchar(100), [Normal_Days] Varchar(100), [Leap_Days] Varchar(100)) --Gregorian calendar
Insert Into @Days_Of_the_Month
Values --Please be aware that the [Month] column values must have padded zeroes to two digit places... For example 01 instead of 1... This is because we pad later on, in order to form proper date values...
('01', '31', '31'),
('02', '28', '29'), --Notice the different normal and leap values for month 2, in order to handle leap year in later logic in this algorithm...
('03', '31', '31'),
('04', '30', '30'),
('05', '31', '31'),
('06', '30', '30'),
('07', '31', '31'),
('08', '31', '31'),
('09', '30', '30'),
('10', '31', '31'),
('11', '30', '30'),
('12', '31', '31')
-----Intrinsic SQL Server System Constants


--DATA VALIDATION CHECKS (For Out Of Scope Parameters)
--(@Data PART 0001: PRE-DATEPART PARSING/EXTRACTION)... You can turn these into specific exception messages if you like, but I simply can't be bothered right now, so simply put: Your input dates @Data is corrupt in some way... Please check for the correct formatting, and re-execute the algorithm once appropriate changes have been made, if you desire!!!...
Declare @Exception_Value Varchar(Max)
Declare @Exception_Message Varchar(Max)
If (Select Count(1) From @Data) Is Null
	Begin
		Set @Exception_Message = ('Exception: Invalid_Data_Input_Argument: No_Date_String_Arguments_Inputed... No specific offending argument: ...')
		GoTo Invalid_Data_Input_Argument_No_Date_String_Arguments_Inputed
	End
If (Select Count(1) From @Data) < 2
	Begin
		Set @Exception_Message = ('Exception: Invalid_Data_Input_Argument: Not_Enough_Date_String_Arguments_Inputed... No specific offending argument: ...')
		GoTo Invalid_Data_Input_Argument_Not_Enough_Date_String_Arguments_Inputed
	End
Set @Exception_Value = (Select Min([Data]) From @Data Where Len([Data]) > 25)
If @Exception_Value Is Not Null
	Begin
		Set @Exception_Message = ('Exception: Invalid_Data_Input_Argument: Date_Strings_That_Are_Too_Long... A specific offending argument: ' + @Exception_Value)
		GoTo Invalid_Data_Input_Argument_Date_Strings_That_Are_Too_Long
	End
Set @Exception_Value = (Select Min([Data]) From @Data Where [Data] Like ('%[^' + @Date_Part_Delimiter_Character + '0-9' + @Date_Time_Delimiter_Character + @Magnitudinal_Time_Delimiter_Character + @Precisional_Time_Delimiter_Character + ']%'))
If @Exception_Value Is Not Null
	Begin
		Set @Exception_Message = ('Exception: Invalid_Data_Input_Argument: Date_Strings_That_Have_Illegal_Characters... A specific offending argument: ' + @Exception_Value)
		GoTo Invalid_Data_Input_Argument_Date_Strings_That_Have_Illegal_Characters
	End
Set @Exception_Value = (Select Min([Data]) From @Data Where Len([Data]) > Len(Replace([Data], @Date_Time_Delimiter_Character, '')) And Len([Data]) = Len(Replace([Data], @Date_Part_Delimiter_Character, '')) Or Len([Data]) > Len(Replace([Data], '.', '')) And Len([Data]) = Len(Replace([Data], ':', '')))
If @Exception_Value Is Not Null
	Begin
		Set @Exception_Message = ('Exception: Invalid_Data_Input_Argument: Date_Strings_That_Have_Incorrect_Combinations_Of_Delimiters... A specific offending argument: ' + @Exception_Value)
		GoTo Invalid_Data_Input_Argument_Date_Strings_That_Have_Incorrect_Combinations_Of_Delimiters
	End
Set @Exception_Value = (Select Min([Data]) From @Data Where Len([Data]) > Len(Replace([Data], @Date_Part_Delimiter_Character, '')) And Len([Data]) > Len(Replace([Data], ':', '')) And Charindex(@Date_Part_Delimiter_Character, [Data]) > Charindex(':', [Data]) Or Len([Data]) > Len(Replace([Data], ':', '')) And Len([Data]) > Len(Replace([Data], '.', '')) And Charindex(':', [Data]) > Charindex('.', [Data]))
If @Exception_Value Is Not Null
	Begin
		Set @Exception_Message = ('Exception: Invalid_Data_Input_Argument: Date_Strings_That_Have_Separators_In_the_Wrong_Order... A specific offending argument: ' + @Exception_Value)
		GoTo Invalid_Data_Input_Argument_Date_Strings_That_Have_Separators_In_the_Wrong_Order
	End
Set @Exception_Value = (Select Min([Data]) From @Data Where Len([Data]) > Len(Replace([Data], @Date_Part_Delimiter_Character, '')) And (Len([Data]) - 2) != Len(Replace([Data], @Date_Part_Delimiter_Character, '')) Or Len([Data]) > Len(Replace([Data], @Date_Time_Delimiter_Character, '')) And (Len([Data]) - 1) != Len(Replace([Data], @Date_Time_Delimiter_Character, '')) Or Len([Data]) > Len(Replace([Data], ':', '')) And (Len([Data]) - 2) != Len(Replace([Data], ':', '')) Or Len([Data]) > Len(Replace([Data], '.', '')) And (Len([Data]) - 1) != Len(Replace([Data], '.', '')))
If @Exception_Value Is Not Null
	Begin
		Set @Exception_Message = ('Exception: Invalid_Data_Input_Argument: Date_Strings_That_Have_Incorrect_Counts_Of_Delimiters... A specific offending argument: ' + @Exception_Value)
		GoTo Invalid_Data_Input_Argument_Date_Strings_That_Have_Incorrect_Counts_Of_Delimiters
	End
Set @Exception_Value = (Select Min([Data]) From @Data Where Left([Data], 1) = @Date_Part_Delimiter_Character Or Left([Data], 1) = @Date_Time_Delimiter_Character Or Left([Data], 1) = ':' Or Len([Data]) > Len(Replace([Data], @Date_Part_Delimiter_Character, '')) And Charindex(@Date_Part_Delimiter_Character, [Data]) > 5 Or Len([Data]) = Len(Replace([Data], @Date_Part_Delimiter_Character, '')) And Len([Data]) > Len(Replace([Data], ':', '')) And Charindex(':', [Data]) > 3 Or [Data] Like ('%' + @Date_Part_Delimiter_Character + '___%' + @Date_Part_Delimiter_Character + '%') Or [Data] Like ('%' + @Date_Part_Delimiter_Character + '%' + @Date_Part_Delimiter_Character + '___%' + @Date_Time_Delimiter_Character + '%') Or [Data] Like ('%' + @Date_Time_Delimiter_Character + '___%' + @Magnitudinal_Time_Delimiter_Character + '%' + @Magnitudinal_Time_Delimiter_Character + '%') Or [Data] Like ('%' + @Magnitudinal_Time_Delimiter_Character + '___%' + @Magnitudinal_Time_Delimiter_Character + '%') Or [Data] Like ('%' + @Magnitudinal_Time_Delimiter_Character + '%' + @Magnitudinal_Time_Delimiter_Character + '___%' + @Precisional_Time_Delimiter_Character + '%') Or Right([Data], 1) = @Date_Part_Delimiter_Character Or Right([Data], 1) = '.')
If @Exception_Value Is Not Null
	Begin
		Set @Exception_Message = ('Exception: Invalid_Data_Input_Argument: Date_Strings_That_Have_Incorrect_Separator_Separation... A specific offending argument: ' + @Exception_Value)
		GoTo Invalid_Data_Input_Argument_Date_Strings_That_Have_Incorrect_Separator_Separation
	End
Set @Exception_Value = (Select Min([Data]) From @Data Where Charindex('.', Reverse([Data])) > 8)
If @Exception_Value Is Not Null
	Begin
		Set @Exception_Message = ('Exception: Invalid_Data_Input_Argument: Date_Strings_That_Have_Incorrect_Number_Of_Fractional_Seconds_Digits_(Maximum_Should_Be_7_Fractional_Seconds_Digits)... A specific offending argument: ' + @Exception_Value)
		GoTo Invalid_Data_Input_Argument_Date_Strings_That_Have_Incorrect_Number_Of_Fractional_Seconds_Digits
	End


--INTERNAL VARIABLES
Declare @Data_Anchored Table ([Anchor_Order] Bigint, [Argument] Varchar(Max), [Argument_Reversed] Varchar(Max))
Declare @Data_Anchored_Parsed_and_Padded Table ([Anchor_Order] Bigint, [Argument] Varchar(Max), [Year]  Varchar(100), [Month] Varchar(100), [Day] Varchar(100), [Hour] Varchar(100), [Minute] Varchar(100), [Second] Varchar(100), [Fractional_Second] Varchar(100))


--ALGORITHM EXECUTION
--Need to anchor data, in order to retain duplicates... If you don't want this, then set the @Remove_Duplicates global variable to one (1)...
If @Remove_Duplicates = 0
	Begin
		Insert Into @Data_Anchored ([Anchor_Order], [Argument], [Argument_Reversed])
		Select
			Row_Number() Over(Order By (Select Null)) As [Anchor_Order], --Ideally we want to be able to add a row number without ordering!!!... Please enable this functionality Microsoft, otherwise this algorithm is completely useless in SQL Server... Although very useful in other coding paradigms, where it is trivial to just add an order column without actually ordering your data...
			[Data] As [Argument],
			Reverse([Data]) As [Argument_Reversed]
		From @Data
	End
Else If @Remove_Duplicates = 1
	Begin
		Insert Into @Data_Anchored ([Anchor_Order], [Argument], [Argument_Reversed])
		Select
			Row_Number() Over(Order By (Select Null)) As [Anchor_Order], --Ideally we want to be able to add a row number without ordering!!!... Please enable this functionality Microsoft, otherwise this algorithm is completely useless in SQL Server... Although very useful in other coding paradigms, where it is trivial to just add an order column without actually ordering your data...
			[Data] As [Argument],
			Reverse([Data]) As [Argument_Reversed]
		From @Data
		Group By [Data]
	End


--Need to extract dateparts here in order to properly index date arguments...
Insert Into @Data_Anchored_Parsed_and_Padded ([Anchor_Order], [Argument], [Year], [Month], [Day], [Hour], [Minute], [Second], [Fractional_Second])
Select
	[Anchor_Order] As [Anchor_Order],
	[Argument] As [Argument],
	(Case When Patindex(('%' + @Date_Part_Delimiter_Character + '%'), [Argument]) = 0 Then Null Else Right(('000' + Substring([Argument], 1, Greatest(1, (Patindex(('%' + @Date_Part_Delimiter_Character + '%'), [Argument]) - 1)))), 4) End) As [Year],
	(Case When Patindex(('%' + @Date_Part_Delimiter_Character + '%'), [Argument]) = 0 Then Null Else Right(('0' + Replace(Substring([Argument], (Len(Substring([Argument], 1, Greatest(1, (Patindex(('%' + @Date_Part_Delimiter_Character + '%'), [Argument]) - 1)))) + 2), 2), @Date_Part_Delimiter_Character, '')), 2) End) As [Month],
	(Case When Patindex(('%' + @Date_Part_Delimiter_Character + '%'), [Argument]) = 0 Then Null Else Right(('0' + Replace(Substring([Argument], ((Len(Substring([Argument], 1, Greatest(1, (Patindex(('%' + @Date_Part_Delimiter_Character + '%'), [Argument]) - 1)))) + 2) + (Len(Replace(Substring([Argument], (Len(Substring([Argument], 1, Greatest(1, (Patindex(('%' + @Date_Part_Delimiter_Character + '%'), [Argument]) - 1)))) + 2), 2), @Date_Part_Delimiter_Character, '')) + 1)), 2), @Date_Time_Delimiter_Character, '')), 2) End) As [Day],
	(Case When Patindex(('%' + @Magnitudinal_Time_Delimiter_Character + '%'), [Argument]) = 0 Then Null Else Right(('0' + (Case When Patindex(('%' + @Date_Part_Delimiter_Character + '%'), [Argument]) = 0 Then Replace(Left([Argument], 2), ':', '') Else Replace(Substring([Argument], (Patindex(('%' + @Date_Time_Delimiter_Character + '%'), [Argument]) + 1), 2), ':', '') End)), 2) End) As [Hour],
	(Case When Patindex(('%' + @Magnitudinal_Time_Delimiter_Character + '%'), [Argument]) = 0 Then Null Else Right(('0' + (Case When Patindex(('%' + @Precisional_Time_Delimiter_Character + '%'), [Argument]) = 0 Then Reverse(Replace(Substring([Argument_Reversed], (Patindex(('%' + @Magnitudinal_Time_Delimiter_Character + '%'), [Argument_Reversed]) + 1), 2), ':', '')) Else Reverse(Replace(Substring([Argument_Reversed], ((Len(Substring([Argument_Reversed], 1, Greatest(1, (Patindex(('%' + @Precisional_Time_Delimiter_Character + '%'), [Argument_Reversed]) - 1)))) + 2) + (Len(Replace(Substring([Argument_Reversed], (Len(Substring([Argument_Reversed], 1, Greatest(1, (Patindex(('%' + @Precisional_Time_Delimiter_Character + '%'), [Argument_Reversed]) - 1)))) + 2), 2), ':', '')) + 1)), 2), ':', '')) End)), 2) End) As [Minute],
	(Case When Patindex(('%' + @Magnitudinal_Time_Delimiter_Character + '%'), [Argument]) = 0 Then Null Else Right(('0' + (Case When Patindex(('%' + @Precisional_Time_Delimiter_Character + '%'), [Argument]) = 0 Then Replace(Right([Argument], 2), ':', '') Else Reverse(Replace(Substring([Argument_Reversed], (Len(Substring([Argument_Reversed], 1, Greatest(1, (Patindex(('%' + @Precisional_Time_Delimiter_Character + '%'), [Argument_Reversed]) - 1)))) + 2), 2), ':', '')) End)), 2) End) As [Second],
	(Case When Patindex(('%' + @Precisional_Time_Delimiter_Character + '%'), [Argument]) = 0 Then Null Else Left((Reverse(Substring([Argument_Reversed], 1, Greatest(1, (Patindex(('%' + @Precisional_Time_Delimiter_Character + '%'), [Argument_Reversed]) - 1)))) + '000000'), 7) End) As [Fractional_Second]
From @Data_Anchored
--If you want to use this algorithm's datepart feature as a standalone, in order to parse datetime values, then please remember to include the two data validation stages before (PART 0001) and after (PART 0002) this particular codeblock...


--(@Data PART 0002: POST-DATEPART PARSING/EXTRACTION)... You can turn these into specific exception messages if you like, but I simply can't be bothered right now, so simply put: Your input dates @Data is corrupt in some way... Please check for the correct formatting, and re-execute the algorithm once appropriate changes have been made, if you desire!!!...
Set @Exception_Value = (Select Min([Argument]) From @Data_Anchored_Parsed_and_Padded A Left Join @Days_Of_the_Month B On (B.[Month] = A.[Month]) Where Cast(A.[Year] As Int) < 1 Or Cast(A.[Year] As Int) > 9999 Or Cast(A.[Month] As Int) < 1  Or Cast(A.[Month] As Int) > 12 Or Cast(A.[Day] As Int) < 1 Or Cast(A.[Day] As Int) > (Case When Cast(A.[Year] As Int) % 400 = 0 Then B.[Leap_Days] Else (Case When Cast(A.[Year] AS Int) % 100 = 0 Then B.[Normal_Days] Else (Case When Cast(A.[Year] As Int) % 4 = 0 Then B.[Leap_Days] Else B.[Normal_Days] End) End) End) Or Cast(A.[Hour] As Int) < 0 Or Cast(A.[Hour] As Int) > 24 Or Cast(A.[Minute] As Int) < 0 Or Cast(A.[Minute] As Int) > 59 Or Cast(A.[Second] As Int) < 0 Or Cast(A.[Second] As Int) > 59 Or Cast(A.[Fractional_Second] As Int) < 0 Or Cast(A.[Fractional_Second] As Int) > 9999999) --You could rather easily change the algorithm logic so that all the casting becomes unnecessary here (which it is at the moment, due to the use of varchar-based numbers)... Please_Also_Know_That_HERE_WE_HANDLE_LEAP_YEARS_AUTOMATICALLY...
If @Exception_Value Is Not Null
	Begin
		Set @Exception_Message = ('Exception: Invalid_Data_Input_Argument: Simply_Checking_For_Silly_Datepart_Values_Like_the_Existence_Of_the_81st_Minute_Of_An_Hour_Which_Would_Clearly_Be_Wrong_____and_Also_An_Indication_That_Your_Input_Data_Is_Substantially_Subject_To_Corruption_____and_Please_Also_Know_That_HERE_WE_HANDLE_LEAP_YEARS_AUTOMATICALLY... A specific offending argument: ' + @Exception_Value)
		GoTo Invalid_Data_Input_Argument_Simply_Checking_For_Silly_Datepart_Values
	End


--The Results
Select
	[Anchor_Order] As [Anchor_Order],
	[Argument] As [Argument],
	[Year] As [Year],
	[Month] As [Month],
	[Day] As [Day],
	[Hour] As [Hour],
	[Minute] As [Minute],
	[Second] As [Second],
	[Fractional_Second] As [Fractional_Second]
From @Data_Anchored_Parsed_and_Padded

--The following statment is kind of misleading, I know... But I couldn't quickly find another way to not execute the validation selects after this point, if the query is successfull...
Return


--Other exception cases...
Invalid_Data_Input_Argument_No_Date_String_Arguments_Inputed:
Select @Exception_Message
Return

Invalid_Data_Input_Argument_Not_Enough_Date_String_Arguments_Inputed:
Select @Exception_Message
Return

Invalid_Data_Input_Argument_Date_Strings_That_Are_Too_Long:
Select @Exception_Message
Return

Invalid_Data_Input_Argument_Date_Strings_That_Have_Illegal_Characters:
Select @Exception_Message
Return

Invalid_Data_Input_Argument_Date_Strings_That_Have_Incorrect_Combinations_Of_Delimiters:
Select @Exception_Message
Return

Invalid_Data_Input_Argument_Date_Strings_That_Have_Separators_In_the_Wrong_Order:
Select @Exception_Message
Return

Invalid_Data_Input_Argument_Date_Strings_That_Have_Incorrect_Counts_Of_Delimiters:
Select @Exception_Message
Return

Invalid_Data_Input_Argument_Date_Strings_That_Have_Incorrect_Separator_Separation:
Select @Exception_Message
Return

Invalid_Data_Input_Argument_Simply_Checking_For_Silly_Datepart_Values:
Select @Exception_Message
Return

Invalid_Data_Input_Argument_Date_Strings_That_Have_Incorrect_Number_Of_Fractional_Seconds_Digits:
Select @Exception_Message
Return