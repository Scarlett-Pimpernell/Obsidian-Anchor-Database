--MS_Obsidian_Interleaved_Partition_Number_Sorter

--COMMENTS:
--THIS ALGORITHM IS CURRENTLY USELESS IN SQL SERVER IN TERMS OF IMPROVING COMPUTATION SPEEDS FOR SORTING NUMBERS... IT IS SIMPLY TO DEMONSTRATE THE CONCEPT, BUT WOULD ACTUALLY REQUIRE MICROSOFT TO ADD NEW FUNCTIONALITY TO T-SQL, THAT ALLOWS USERS TO USE A COMMAND THAT FIXES ROW ORDER, WHICH ONE COULD THEN SWITCH ON AND OFF AS APPROPRIATE!!!... AS SUCH, WITHOUT THIS ADDITIONAL FUCNTIONALITY, THIS ALGORITHM WILL RUN SLOWER THAN A SIMPLE ORDER BY CLAUSE, FOR OBVIOUS REASONS...
--This algorithm will provide the best performance with input datasets that have a large range in numerical values (i.e. covering many different significant figures), and also when the digit length distribution of arguements across this input data range, is as flat/equal/balanced as possible across said significant figure classes.
--For best performance (and this is necessary to take any advantage of the pratitioned sort technique), please remove all leading zeroes from each arguement value integer component, and also please remove all trailing zeroes from each arguement value decimal component, before feeding a dataset into this stored procedure!!!
--In an alternative implementation, you would partition the data into separate partition tables, rather than simply labelling each row with a group label, and indeed, this alternative approach may be even quicker and more energy-efficient, because you would avoid the extra partition group checks, when building the final sorted table.
--The reason why this algorithm is so powerful, is because it takes advantage of the ordinal nature of numbers, such that partitions of the input data are created based on number digit length (significant figures), and thereby massively reduces the exponential sorting penalty where usually every pair of arguements would have to be checked for order. Instead, because we now have significant figure or number digit length paritions, we only experience a very shallow exponentiation penalty, because we only have to check pairs of number arguements within a partition, and then we simply append the ordered partitions into a fully-ordered superset. You should experience maybe more than multiples of compute speed and energy efficiency performance improvements on truly big data problem spaces (Billions of arguement values), and especially on hyper data problem spaces (Trillions of arguement values), that need to be sorted.
--Essentially, the algorithm works so effectively in speeding up ordering compute time, by doing a sizeable amount of linear pre-transformations and pre-partitions, in order to eliminate most of the exponential ordering computations (which would otherwise become prohibitive in big and hyper data volumes)... We simultaneously implement separate partitions for digits in both the integer component and the decimal component, which means that maximal number sorting speed can be achieved...

--NOTA BENE: I understand that Min() and Max() require a basic ordering algorithm which is 'slow' (and would otherwise lead to a longer compute time due to the fact there are multiple calls to the functions Min() and Max() in this algorithm), but, because we have massively group partitioned data whenever we use these functions against a result set, the exponential detriment of the basic ordering algorithm is absolutely minimised... You should still find that overall, this algorithm is significantly speedier than the native SQL Server 'Order By' clause on its own, when applied directly to a table of input numbers!!!...

--LOAD TESTING: I can't really test this properly on my SQL_Express setup, so can someone else please investigate thoroughly, and release some vividly illuminating statistics, which demonstrate the clear superirority of this algorithm, in most number sorting usecases...

--GLOBAL VARIABLES
Declare @Sort_Polarity Varchar(10)
Set @Sort_Polarity = 'Ascending' --As opposed to the other option ('Descending')

Declare @Data Table ([Arguement] Varchar(Max))
Insert Into @Data ([Arguement])
Values
('90.1167842'),
('90.1167849'),
('1.5'),
('1.58'),
('3'),
('2'),
('107'),
('107'),
('89'),
('110'),
('16390'),
('17380'),
('11110.56'),
('11110.53'),
('1')


--DATA VALIDATION CHECKS (For Out Of Scope Parameters)
--(@Sort Polarity)
If @Sort_Polarity Is Null GoTo Invalid_Sort_Polarity_Input_Arguement
If @Sort_Polarity <> 'Ascending' --Dual If Statement With the Line Afterwards.
	If @Sort_Polarity <> 'Descending' GoTo Invalid_Sort_Polarity_Input_Arguement

--(@Data)
If (Select Count(1) From @Data) Is Null GoTo Invalid_Data_Input_Arguement
If (Select Count(1) From @Data) < 2 GoTo Invalid_Data_Input_Arguement


--INTERNAL VARIABLES
Declare @Pre_Computed_Data As Table ([Arguement] Varchar(Max), [Decimalised_Arguement] Decimal(38,19), [Integer_Length] BigInt, [Decimal_Length] BigInt)
Declare @Integer_Component_Extents As Table ([Integer_Component_Length] Bigint, [Minimum_Extent] Decimal(38,19), [Maximum_Extent] Decimal(38,19))
Declare @Decimal_Component_Extents As Table ([Decimal_Component_Length] Bigint, [Minimum_Extent] Decimal(38,19), [Maximum_Extent] Decimal(38,19))
Declare @Loop_Count_0001 As BigInt
Declare @Partition_Map_Interleaved_Integer_Component_Class_Splitter_Alpha As Table ([Minimum_Extent] Decimal(38,19), [Maximum_Extent] Decimal(38,19))
Declare @Partition_Map_Interleaved_Integer_Component_Class_Splitter_Beta As Table ([Minimum_Extent] Decimal(38,19), [Maximum_Extent] Decimal(38,19))
Declare @Partition_Map_Interleaved_Intermediate As Table ([Minimum_Extent] Decimal(38,19), [Maximum_Extent] Decimal(38,19))
Declare @Partition_Map_Interleaved_Final As Table ([Partition] Bigint, [Minimum_Extent] Decimal(38,19), [Maximum_Extent] Decimal(38,19))
Declare @Data_Row_Count As Bigint
Declare @Partition_Extent_Arguements As Table ([Minimum_Extent] Decimal(38,19), [Maximum_Extent] Decimal(38,19))
Declare @Interleaved_Partition_Sort_Merge As Table ([Order] Bigint, [Arguement] Varchar(Max))
Declare @Cumulative_Sort_Order_Limit As Bigint

--ALGORITHM EXECUTION
--The following codeblocks partition integer and decimal components of each arguement, and then intra-integer-length-partition decimal-length-partition sort the input data arguement column.
Insert Into @Pre_Computed_Data ([Arguement], [Decimalised_Arguement], [Integer_Length], [Decimal_Length])
Select
	[Arguement] As [Arguement],
	Cast([Arguement] As Decimal(38,19)) As [Decimalised_Arguement],
	(Case When Patindex('%.%', [Arguement]) > 0 Then (Patindex('%.%', [Arguement]) - 1) Else Len([Arguement]) End) As [Integer_Length], --We delimit on the decimal point, in order to properly manage mixed number type values --> We don't want the existence of decimal digits interfering with length partitioning, or being ignored altogether... Also, here, we only want the integer component of the number... Nota Bene: We subtract 1 from the integer component length, in order to find the length  of the integer component of any numbers...
	(Case When Patindex('%.%', [Arguement]) > 0 Then (Len([Arguement]) - Patindex('%.%', [Arguement])) Else 0 End) As [Decimal_Length] --We delimit on the decimal point, in order to properly manage mixed number type values --> We don't want the existence of decimal digits interfering with length partitioning, or being ignored altogether... Also, here, we only want the decimal component of the number... Nota Bene: We don't bother removing the decimal point from the Len() function calculation, because we would need to otherwise add 1 to the resulting overall output value anyway (This is slightly more efficient, but with hyper data, the compute speed difference could be significant!)...	
From @Data


--The following codeblocks return sorted data as desired.
--Ascending Sort
If @Sort_Polarity = 'Ascending'
Begin
	
	--Build Integer Component Extents
	Insert Into @Integer_Component_Extents ([Integer_Component_Length], [Minimum_Extent], [Maximum_Extent])
	Select
		Max([Integer_Length]) As [Integer_Component_Length],
		Min([Decimalised_Arguement]) As [Minimum_Extent],
		Max([Decimalised_Arguement]) As [Maximum_Extent]
	From @Pre_Computed_Data
	Where [Decimal_Length] = 0
	Group By [Integer_Length]

	--Build Decimal Component Extents
	Insert Into @Decimal_Component_Extents ([Decimal_Component_Length], [Minimum_Extent], [Maximum_Extent])
	Select
		Max([Decimal_Length]) As [Decimal_Component_Length],
		Min([Decimalised_Arguement]) As [Minimum_Extent],
		Max([Decimalised_Arguement]) As [Maximum_Extent]
	From @Pre_Computed_Data
	Where [Decimal_Length] > 0
	Group By [Integer_Length], [Decimal_Length]
	

	--Partition Map Interleaving --> THIS IS THE MOST CRUCIAL SECTION OF THE ALGORITHM --> ALLOWING US TO SORT THE INPUT DATA MOSTLY BY A REDUCED SET OF PARTITIONS, RATHER THAN ORDERING BY AN EXPONENTIAL CROSS JOIN PAIR COMPARISON OF EVERY ARGUEMENT!!!... --> MASSIVE COMPUTE SPEED GAINS HERE...
	Insert Into @Partition_Map_Interleaved_Integer_Component_Class_Splitter_Alpha ([Minimum_Extent], [Maximum_Extent])
	Select
		Min(A.[Minimum_Extent]) As [Minimum_Extent],
		Floor(Min(B.[Minimum_Extent])) As [Maximum_Extent] --We use the Floor() function to avoid extent boundary overlaps/collisions...
	From @Integer_Component_Extents A
	Inner Join @Decimal_Component_Extents B On
		(B.[Minimum_Extent] > A.[Minimum_Extent] And B.[Maximum_Extent] < A.[Maximum_Extent])
	Group By A.[Minimum_Extent], A.[Maximum_Extent]

	Insert Into @Partition_Map_Interleaved_Integer_Component_Class_Splitter_Beta ([Minimum_Extent], [Maximum_Extent])
	Select
		Ceiling(Max(B.[Maximum_Extent])) As [Minimum_Extent], --We use the Ceiling() function to avoid extent boundary overlaps/collisions...
		Max(A.[Maximum_Extent]) As [Maximum_Extent]
	From @Integer_Component_Extents A
	Inner Join @Decimal_Component_Extents B On
		(B.[Minimum_Extent] > A.[Minimum_Extent] And B.[Maximum_Extent] < A.[Maximum_Extent])
	Group By A.[Minimum_Extent], A.[Maximum_Extent]

	Insert Into @Partition_Map_Interleaved_Intermediate ([Minimum_Extent], [Maximum_Extent])
	Select
		A.[Minimum_Extent] As [Maximum_Extent],
		A.[Maximum_Extent] As [Maximum_Extent]
	From @Integer_Component_Extents A
	Left Join @Partition_Map_Interleaved_Integer_Component_Class_Splitter_Alpha B On
		(B.[Maximum_Extent] = A.[Maximum_Extent])
	Left Join @Partition_Map_Interleaved_Integer_Component_Class_Splitter_Beta C On
		(C.[Maximum_Extent] = A.[Maximum_Extent])
	Where B.[Maximum_Extent] Is Null And C.[Maximum_Extent] Is Null
	Union All
	Select
		[Minimum_Extent] As [Maximum_Extent],
		[Maximum_Extent] As [Maximum_Extent]
	From @Decimal_Component_Extents
	Union All
	Select
		[Minimum_Extent] As [Maximum_Extent],
		[Maximum_Extent] As [Maximum_Extent]
	From @Partition_Map_Interleaved_Integer_Component_Class_Splitter_Alpha
	Union All
	Select
		[Minimum_Extent] As [Maximum_Extent],
		[Maximum_Extent] As [Maximum_Extent]
	From @Partition_Map_Interleaved_Integer_Component_Class_Splitter_Beta

	Insert Into @Partition_Map_Interleaved_Final ([Partition], [Minimum_Extent], [Maximum_Extent])
	Select
		Row_Number() Over(Order By [Maximum_Extent] Asc) As [Partition], --We are ordering by ascension, so Asc is used here...
		[Minimum_Extent] As [Maximum_Extent],
		[Maximum_Extent] As [Maximum_Extent]
	From @Partition_Map_Interleaved_Intermediate


	--Interleaved Partition Sort Merge
	Set @Loop_Count_0001 = 0
	Set @Data_Row_Count = (Select Count(1) From @Partition_Map_Interleaved_Final) --Partition rowset count calculation...
	Set @Cumulative_Sort_Order_Limit = 0
	While @Loop_Count_0001 < @Data_Row_Count
		Begin
		
			Set @Loop_Count_0001 = (@Loop_Count_0001 + 1)

			--The basic sorting
			Insert Into @Partition_Extent_Arguements ([Minimum_Extent], [Maximum_Extent])
			Select
				[Minimum_Extent] As [Minimum_Extent],
				[Maximum_Extent] As [Maximum_Extent]
			From @Partition_Map_Interleaved_Final
			Where [Partition] = @Loop_Count_0001
			
			Insert Into @Interleaved_Partition_Sort_Merge ([Order], [Arguement])
			Select
				(@Cumulative_Sort_Order_Limit + Row_Number() Over(Order By Cast([Arguement] As Decimal(38,19)) Asc)) As [Order],
				[Arguement]
			From @Pre_Computed_Data
			Where Cast([Arguement] As Decimal(38,19)) >= (Select [Minimum_Extent] From @Partition_Extent_Arguements)
			And Cast([Arguement] As Decimal(38,19)) <= (Select [Maximum_Extent] From @Partition_Extent_Arguements)

			Set @Cumulative_Sort_Order_Limit = (Select Count(1) From @Interleaved_Partition_Sort_Merge)

			--Must clear out the necessary table variables each iteration of the loop...
			Delete From @Partition_Extent_Arguements

		End

End

--Descending Sort
If @Sort_Polarity = 'Descending'
Begin
	
	--Build Integer Component Extents
	Insert Into @Integer_Component_Extents ([Integer_Component_Length], [Minimum_Extent], [Maximum_Extent])
	Select
		Min([Integer_Length]) As [Integer_Component_Length],
		Min([Decimalised_Arguement]) As [Minimum_Extent],
		Max([Decimalised_Arguement]) As [Maximum_Extent]
	From @Pre_Computed_Data
	Where [Decimal_Length] = 0
	Group By [Integer_Length]

	--Build Decimal Component Extents
	Insert Into @Decimal_Component_Extents ([Decimal_Component_Length], [Minimum_Extent], [Maximum_Extent])
	Select
		Min([Decimal_Length]) As [Decimal_Component_Length],
		Min([Decimalised_Arguement]) As [Minimum_Extent],
		Max([Decimalised_Arguement]) As [Maximum_Extent]
	From @Pre_Computed_Data
	Where [Decimal_Length] > 0
	Group By [Integer_Length], [Decimal_Length]
	

	--Partition Map Interleaving --> THIS IS THE MOST CRUCIAL SECTION OF THE ALGORITHM --> ALLOWING US TO SORT THE INPUT DATA MOSTLY BY A REDUCED SET OF PARTITIONS, RATHER THAN ORDERING BY AN EXPONENTIAL CROSS JOIN PAIR COMPARISON OF EVERY ARGUEMENT!!!... --> MASSIVE COMPUTE SPEED GAINS HERE...
	Insert Into @Partition_Map_Interleaved_Integer_Component_Class_Splitter_Alpha ([Minimum_Extent], [Maximum_Extent])
	Select
		Min(A.[Minimum_Extent]) As [Minimum_Extent],
		Floor(Min(B.[Minimum_Extent])) As [Maximum_Extent] --We use the Floor() function to avoid extent boundary overlaps/collisions...
	From @Integer_Component_Extents A
	Inner Join @Decimal_Component_Extents B On
		(B.[Minimum_Extent] > A.[Minimum_Extent] And B.[Maximum_Extent] < A.[Maximum_Extent])
	Group By A.[Minimum_Extent], A.[Maximum_Extent]

	Insert Into @Partition_Map_Interleaved_Integer_Component_Class_Splitter_Beta ([Minimum_Extent], [Maximum_Extent])
	Select
		Ceiling(Max(B.[Maximum_Extent])) As [Minimum_Extent], --We use the Ceiling() function to avoid extent boundary overlaps/collisions...
		Max(A.[Maximum_Extent]) As [Maximum_Extent]
	From @Integer_Component_Extents A
	Inner Join @Decimal_Component_Extents B On
		(B.[Minimum_Extent] > A.[Minimum_Extent] And B.[Maximum_Extent] < A.[Maximum_Extent])
	Group By A.[Minimum_Extent], A.[Maximum_Extent]

	Insert Into @Partition_Map_Interleaved_Intermediate ([Minimum_Extent], [Maximum_Extent])
	Select
		A.[Minimum_Extent] As [Maximum_Extent],
		A.[Maximum_Extent] As [Maximum_Extent]
	From @Integer_Component_Extents A
	Left Join @Partition_Map_Interleaved_Integer_Component_Class_Splitter_Alpha B On
		(B.[Maximum_Extent] = A.[Maximum_Extent])
	Left Join @Partition_Map_Interleaved_Integer_Component_Class_Splitter_Beta C On
		(C.[Maximum_Extent] = A.[Maximum_Extent])
	Where B.[Maximum_Extent] Is Null And C.[Maximum_Extent] Is Null
	Union All
	Select
		[Minimum_Extent] As [Maximum_Extent],
		[Maximum_Extent] As [Maximum_Extent]
	From @Decimal_Component_Extents
	Union All
	Select
		[Minimum_Extent] As [Maximum_Extent],
		[Maximum_Extent] As [Maximum_Extent]
	From @Partition_Map_Interleaved_Integer_Component_Class_Splitter_Alpha
	Union All
	Select
		[Minimum_Extent] As [Maximum_Extent],
		[Maximum_Extent] As [Maximum_Extent]
	From @Partition_Map_Interleaved_Integer_Component_Class_Splitter_Beta

	Insert Into @Partition_Map_Interleaved_Final ([Partition], [Minimum_Extent], [Maximum_Extent])
	Select
		Row_Number() Over(Order By [Maximum_Extent] Asc) As [Partition], --We are ordering by ascension, so Asc is used here...
		[Minimum_Extent] As [Maximum_Extent],
		[Maximum_Extent] As [Maximum_Extent]
	From @Partition_Map_Interleaved_Intermediate

	
	--Interleaved Partition Sort Merge
	 --References to these two variables (@Loop_Count_0001 and @Data_Row_Count) are inverted here and in the subsequent sourcecode of this loop  (when compared to the ascending implementation above), because we are ordering by descent...
	Set @Loop_Count_0001 = 0
	Set @Data_Row_Count = (Select Count(1) From @Partition_Map_Interleaved_Final) --Partition rowset count calculation...
	Set @Cumulative_Sort_Order_Limit = 0
	While @Loop_Count_0001 < @Data_Row_Count
		Begin
			
			Set @Loop_Count_0001 = (@Loop_Count_0001 + 1)

			--The basic sorting
			Insert Into @Partition_Extent_Arguements ([Minimum_Extent], [Maximum_Extent])
			Select
				[Minimum_Extent] As [Minimum_Extent],
				[Maximum_Extent] As [Maximum_Extent]
			From @Partition_Map_Interleaved_Final
			Where [Partition] = ((@Data_Row_Count + 1) - @Loop_Count_0001)
			
			Insert Into @Interleaved_Partition_Sort_Merge ([Order], [Arguement])
			Select
				(@Cumulative_Sort_Order_Limit + Row_Number() Over(Order By Cast([Arguement] As Decimal(38,19)) Desc)) As [Order],
				[Arguement]
			From @Pre_Computed_Data
			Where Cast([Arguement] As Decimal(38,19)) <= (Select [Maximum_Extent] From @Partition_Extent_Arguements)
			And Cast([Arguement] As Decimal(38,19)) >= (Select [Minimum_Extent] From @Partition_Extent_Arguements)

			Set @Cumulative_Sort_Order_Limit = (Select Count(1) From @Interleaved_Partition_Sort_Merge)
			
			--Must clear out the necessary table variables each iteration of the loop...
			Delete From @Partition_Extent_Arguements

		End

End


--The Results
Select
	[Order] As [Order],
	[Arguement] As [Arguement]
From @Interleaved_Partition_Sort_Merge Order By [Order] --This 'Order By' clause is only necessary to display results in the right order in SQL Server... Most other programming contexts will not have this problem, because the don't have a paradigm where result sets are ordered at runtime, depending on query execution plans, which are inherently subject to change in SQL Server...
--The following statment is kind of misleading, I know... But I couldn't quickly find another way to not execute the validation selects after this point, if the query is successfull...
Return


--Other exception cases...
Invalid_Sort_Polarity_Input_Arguement:
Select 'Exception: The first global variable value (@Sort_Polarity), is out of scope for one of the following reasons... It is either not the string "Ascending" (without the double-quotes of course), is not the string "Descending" (without the double-quotes of course), or is either empty or null.'


Invalid_Data_Input_Arguement:
Select 'Exception: The second global variable value (@Data), is out of scope for one of the following reasons... It is either not containing more than one row, or is empty.'