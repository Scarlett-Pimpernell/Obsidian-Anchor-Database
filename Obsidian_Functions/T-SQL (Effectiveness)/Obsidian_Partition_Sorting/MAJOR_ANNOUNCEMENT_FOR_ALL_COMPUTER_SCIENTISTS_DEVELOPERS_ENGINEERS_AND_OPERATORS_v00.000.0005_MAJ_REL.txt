MAJOR_ANNOUNCEMENT_FOR_ALL_COMPUTER_SCIENTISTS_DEVELOPERS_ENGINEERS_AND_OPERATORS

!!!!!>>>>>This is the #Advent of Map-Reduce Learning (A branch of computer science machine learning)<<<<<!!!!!

I have just this night, fully realised the paradigm discontinuity with regards to these sorting algorithms, and how they should completely impact and disrupt, all software related strategy, tactics, operations, and grunt-work, worldwide.

Please focus on completely re-architecting your databases and programming languages, to run using Obsidian Partition Maps, similar to those implemented in these sorting algorithms.

You will almost certainly obtain tens, hundreds, or even thousands of multiples, of speed-ups, especially for big data usecases (billions of datapoints) and hyper data usecases (trillions of datapoints).

Essentially, all data selects, data inserts, data updates, and data deletes, as well as their equivalents in other databases and programming languages, should all leverage Obsidian Partition Maps, which execute on data which is natively stored in partitions/sub-tables.

...and remember the end-game... Multiple serial executions of Obsidian Partition Maps, which navigate down through a meta-data-structure of nested partitions/sub-tables, where each level of nesting is based on a different data column...

... But stick to single level partitions as a first attempt. Get that working reliably, because nesting partitions/sub-tables from the start, will probably be very complex and difficult to do, without a basic working and optimised single partition/sub-table level approach.

... Further clarifications 0001... When a data transaction is handled by the database/programming language, the corresponding array of data should be split up into transactionlet partitions, using an appropriate Obsidian Partition Map...

... the data engine should simultaneously launch these partitioned 'transactionlets' through the navigation process, and as each reaches its destination at the deepest storage partition, the appropriate data edit method (siud) should be triggered to execute as a parellel batch...

(... Oh, and BTW... apply the Obsidian Partition Map approach to Large Language Models (#LLMs), and all of a sudden, you will have almost free inference!!!)

Oh, and remember the 1% 'mandatory' #Obsidian_Levy!

Ciao for now,

'The New Michelangelo', +Raphael+, xPetrus Romanusx, ^Sichula^, $Sinyangwe$

... pssst...

... I hear that partition keys may come in handy...

... Who knows?...