--MS_Obsidian_Partition_Text_Sorter_Contained_Character_Patterning

--COMMENTS:
--This algorithm will provide the best performance with input datasets that have a large variety of textual values (i.e. covering many different combinations of characters), and also when the textual variety distribution of Arguments across this input data range, is as flat/equal/balanced as possible across said charcter combination classes.
--In an alternative implementation, you would partition the data into separate partition tables, rather than simply labelling each row with a group label, and indeed, this alternative approach may be even quicker and more energy-efficient, because you would avoid the extra partition group checks, when building the final sorted table.
--The reason why this algorithm is so powerful, is because it takes advantage of the pattern searchable nature of words, such that partitions of the input data are created based on character patterns (the leading patterns of characters for each argument string), and thereby massively reduces the exponential sorting penalty where usually every pair of Arguments would have to be checked for order. Instead, because we now have character pattern paritions, we only experience a very shallow exponentiation penalty, because we only have to check pairs of textual Arguments within a partition, and then we simply append the ordered partitions into a fully-ordered superset. You should experience maybe more than multiples of compute speed and energy efficiency performance improvements on truly big data problem spaces (Billions of Argument values), and especially on hyper data problem spaces (Trillions of Argument values), that need to be sorted.
--Essentially, the algorithm works so effectively in speeding up ordering compute time, by doing a sizeable amount of linear pre-transformations and pre-partitions (TRUST THE SEEMING MADNESS... IT WILL SERIOUSLY REDUCE COMPUTATION EXPONENTIATION WITH BIG AND HYPER DATA VOLUMES), in order to eliminate most of the painfully exponential Argument-pair-wise ordering computations (which would otherwise become prohibitive in big and hyper data volumes)... We implement separate partitions for containing character patterns ... In this way, maximal number sorting speed can be achieved...

--NOTA BENE 0001: I understand that Min() and Max() require a basic ordering algorithm which is 'slow' (and would otherwise lead to a longer compute time due to the fact there are multiple calls to the functions Min() and Max() in this algorithm), but, because we have massively group partitioned data whenever we use these functions against a result set, the exponential detriment of the basic ordering algorithm is absolutely minimised... You should still find that overall, this algorithm is significantly speedier than the native SQL Server 'Order By' clause on its own, when applied directly to a table of input text strings!!!...
--NOTA BENE 0002: I have now implemented here, an advanced partition sort algorithm, that allows you to partition based on Argument character patterns, by adding a resolution global variable... This particular algorithm should be used instead of the number partition sorter algorithms, if your dataset contains non-numeric text charcters in any of your arguments... But please remember, that you will still have to optimise this resolution variable at test time, using representative data distributions and counts...
--NOTA BENE 0003: You will notice that the output does not have a typical top to bottom numerical array order, but rather is based on contained pattern order in the first order column, and then argument order in the second order column... This is deliberate, and is very useful for example for superfast partition-sorted pre-pattern-matched lookups against data in your database...
--NOTA BENE 0004: I have decided to not even allow the algorithm to handle arguments that don't match a designated partition, because if I were to lump them into say an unmatched partition, and then later the system is told to insert data into a new pattern partition, then we would have VERY DIRTY DATA in the database, because at the same time, the computer would believe that an argument matches designated patterns and also doesn't at the same time, and so there is likely to be many cases where database duplicates would occur inadvertently... THIS IS ALMOST CERTAINLY BAD... and so I have implemented this algorithm in such a way, as mentioned, in order to simply ignore arguments that don't pattern match!...

--WARNING: Please do not switch the @Multi_Partition_Mapping variable assigned value, once you have started ingesting data into a particular partition set (for example in subsequent executions of character pattern partiition ordering and storage)... This once agin will cause unstable algorithmic behaviour, and could crash the system of storage/execution, as well as other dependent systems that rely on using the partition set...

--LOAD TESTING: I can't really test this properly on my SQL_Express setup, so can someone else please investigate thoroughly, and release some vividly illuminating statistics, which demonstrate the clear superirority of this algorithm, in most big and hyper data text sorting usecases... I actually expect this algorithm to be superior to the native SQL Server equivalent, once data volumes exceed around 10 million Arguments that need to be sorted (possibly even less than this will experience significant speed improvements)...

--FINAL COMMENTS ABOUT USAGE: I reasonably theorise, that if you plan to sort on multiple columns, the speed improvements will get exponentially superior by using this algorithm, in proportion to the number of columns that use it in order to sort...

--GLOBAL VARIABLES
Declare @Partition_Transactionlet_Payload_Type As Varchar(1000)
Set @Partition_Transactionlet_Payload_Type = 'Insert' --Options: 1. 'Sort'; 2. 'Select'; 3. 'Insert'; 4. 'Update'; 5. 'Delete';... 6. 'Other'...

Declare @Sort_Polarity As Varchar(10)
Set @Sort_Polarity = 'Ascending' --As opposed to the other option ('Descending')

Declare @Remove_Duplicates As Int
Set @Remove_Duplicates = 0 --If you want to remove duplicates, assign a value of one (1)... Otherwise, assign a value of zero (0)...

Declare @Character_Patterns_For_Partitioning_Arguments Table ([Order] Bigint, [Character_Pattern] Varchar(Max)) --Here I have implemented a variable which is used further below in the algorithm, to check for multiple different character patterns within arguments, simultaneously, and to then partition the ordering routine, based on these pattern matches... You may also desire to implement a similar algorithm (but obviously simpler), in order to check pattern matches simply at the beginning or end of each given argument...
Insert Into @Character_Patterns_For_Partitioning_Arguments ([Order], [Character_Pattern])
Values --Please always make sure that your order column values start at one (1), and increase by one for each subsequent row... Also, please make sure that they are actually correct and unique across all rows... Otherwise the algorithm will be unstable in its behaviour... One example of unpredictable behaviour, is if you assign two character patterns the same order, then depending on many other factors, the partitioning will be different across multiple executions with the same arguments and character partions settings in the global variables...
(1, '0ABCDEF'),
(2, 'CRM'),
(3, 'M'),
(4, '144,000'),
(5, 'Q3'),
(2, '0ABCDEF'),
(6, 'Q3')

--THE FOLLOWING GLOBAL VARIABLE IS VERY IMPORTANT, AND CAN SIGNIFICANTLY CHANGE ALGORITHM BEHAVIOUR... PLEASE UNDERSTAND ITS USE CAREFULLY!!!...
Declare @Multi_Partition_Mapping As Tinyint
Set @Multi_Partition_Mapping = 1 --Set this variable assignation to the value one (1) if you want to allow multiple maps of a single Argument, into different partitions (This can lead to situations of lots more rows produced in the output compared to the input, which may be desirable for your usecase, but be careful, as {WARNING::::--->>>} it could lead to system instability issues and possible failures under some circumstances)... If not, then set this variable value assignation to zero (0)...

Declare @Order_Of_Blunt_Partition_Mapping As Varchar(5) --This variable augments the algorithmic behaviour, only when @Multi_Partition_Mapping global variable is assigned a value of zero (0)...
Set @Order_Of_Blunt_Partition_Mapping = 'First' --Other assignation value option here is = 'Last'... Could implement and indexed approach here, but that is so esoteric, and I don't believe that anyone truyly requires such a usecase, although I stand ready to be corrected if genuine need arises...

Declare @Data Table ([Data] Varchar(Max))
Insert Into @Data ([Data])
Values
('CRM Data Cleanup'),
('ABCDEF1234567890 Quarterly Sales Report'),
('ABCDEF1234567890 Client Onboarding Checklist'),
('ABCDEF1234567890 Marketing Strategy Draft'),
('Budget Approval Pending'),
('Internal Memo â€“ Confidential'),
('ABCDEF1234567890 Employee Feedback Summary'),
('ABCDEF1234567890 Invoice #32789 Sent'),
('ABCDEF1234567890 Supply Chain Update'),
('1234567890ABCDEF Team Meeting Notes'),
('1234567890ABCDEF Legal Review Required'),
('1234567890ABCDEF Social Media Metrics'),
('ABCDEF1234567890 Product Launch Timeline'),
('ABC12345DEF67890 Customer Retention Plan'),
('ABC12345DEF67890 Performance Bonus Criteria'),
('ABC12345DEF67890 Project Milestone Reached'),
('ABC12345DEF67890 Vendor Contract Review'),
('ABCDEF1234567890 Compliance Training Due'),
('ABCDEF1234567890 Financial Forecast Q3'),
('CRM Data Cleanup'),
('ABCDEF1234567890 Board Meeting Agenda')


--DATA VALIDATION CHECKS (For Out Of Scope Parameters)
--(@Sort Polarity)
If @Sort_Polarity Is Null GoTo Invalid_Sort_Polarity_Input_Argument
If @Sort_Polarity <> 'Ascending' --Dual If Statement With the Line Afterwards.
	If @Sort_Polarity <> 'Descending' GoTo Invalid_Sort_Polarity_Input_Argument

--(@Data)
If (Select Count(1) From @Data) Is Null GoTo Invalid_Data_Input_Argument
If (Select Count(1) From @Data) < 2 GoTo Invalid_Data_Input_Argument


--INTERNAL VARIABLES
Declare @Data_Augmented Table ([Argument] Varchar(Max))
Declare @Character_Patterns_For_Partitioning_Arguments_Distinct Table ([Order] Bigint, [Character_Pattern] Varchar(Max))
Declare @Pre_Transformed_Data As Table ([Argument] Varchar(Max), [Contained_Character_Pattern] Varchar(Max))
Declare @Contains_Character_Pattern_Partition_Map As Table ([Partition] Bigint, [Character_Pattern] Varchar(Max))
Declare @Loop_Count_0001 As BigInt
Declare @Partition_Row_Count As Bigint
Declare @Partition_Character_Pattern As Varchar(Max)
Declare @Interleaved_Partition_Sort_Merge As Table ([Partition_Order] Bigint, [Partition_Character_Pattern] Varchar(Max), [Argument_Order] Bigint, [Argument] Varchar(Max))

--ALGORITHM EXECUTION
--Need to anchor data, in order to retain duplicates... If you don't want this, then set the @Remove_Duplicates global variable to one (1)...
If @Remove_Duplicates = 0
	Begin
		Insert Into @Data_Augmented ([Argument])
		Select
			[Data] As [Argument]
		From @Data
	End
Else If @Remove_Duplicates = 1
	Begin
		Insert Into @Data_Augmented ([Argument])
		Select
			[Data] As [Argument]
		From @Data
		Group By [Data]
	End

--We need to remove duplicates that may have been introduced through manual error in the global variables... Otherwise the algorithm could be unnecessarily massively slower than the optimum!...
If @Order_Of_Blunt_Partition_Mapping = 'First'
	Begin
		Insert Into @Character_Patterns_For_Partitioning_Arguments_Distinct ([Order], [Character_Pattern])
		Select
			Min([Order]) As [Order],
			Min([Character_Pattern]) As [Character_Pattern]
		From @Character_Patterns_For_Partitioning_Arguments
		Group By [Character_Pattern]
	End
Else If @Order_Of_Blunt_Partition_Mapping = 'Last'
	Begin
		Insert Into @Character_Patterns_For_Partitioning_Arguments_Distinct ([Order], [Character_Pattern])
		Select
			Max([Order]) As [Order],
			Max([Character_Pattern]) As [Character_Pattern]
		From @Character_Patterns_For_Partitioning_Arguments
		Group By [Character_Pattern]
	End

--The following codeblocks partition character stems of each Argument, and then sort the input data Argument column based on the partitions of these stems.
If @Multi_Partition_Mapping = 1
	Begin
		Insert Into @Pre_Transformed_Data ([Argument], [Contained_Character_Pattern])
		Select
			[Argument] As [Argument],
			B.[Character_Pattern] As [Contained_Character_Pattern]
		From @Data_Augmented A
		Left Join @Character_Patterns_For_Partitioning_Arguments_Distinct B On
			(Patindex(('%' + B.[Character_Pattern] + '%'), A.[Argument]) > 0)
	End
Else If @Multi_Partition_Mapping = 0
	Begin
		If @Order_Of_Blunt_Partition_Mapping = 'First'
			Begin
				Insert Into @Pre_Transformed_Data ([Argument], [Contained_Character_Pattern])
				Select
					[Argument] As [Argument],
					B.[Character_Pattern] As [Contained_Character_Pattern]
				From @Data_Augmented A
				Left Join @Character_Patterns_For_Partitioning_Arguments_Distinct B On
					(Patindex(('%' + B.[Character_Pattern] + '%'), A.[Argument]) > 0)
				Left Join @Character_Patterns_For_Partitioning_Arguments_Distinct C On
					(C.[Order] < B.[Order] And Patindex(('%' + C.[Character_Pattern] + '%'), A.[Argument]) > 0)
				Where C.[Order] Is Null
			End
		Else If @Order_Of_Blunt_Partition_Mapping = 'Last'
			Begin
				Insert Into @Pre_Transformed_Data ([Argument], [Contained_Character_Pattern])
				Select
					[Argument] As [Argument],
					B.[Character_Pattern] As [Contained_Character_Pattern]
				From @Data_Augmented A
				Left Join @Character_Patterns_For_Partitioning_Arguments_Distinct B On
					(Patindex(('%' + B.[Character_Pattern] + '%'), A.[Argument]) > 0)
				Left Join @Character_Patterns_For_Partitioning_Arguments_Distinct C On
					(C.[Order] > B.[Order] And Patindex(('%' + C.[Character_Pattern] + '%'), A.[Argument]) > 0)
				Where C.[Order] Is Null
			End
	End


--The following codeblocks return sorted data as desired.
--Ascending Sort
If @Sort_Polarity = 'Ascending'
Begin
	
	--Order every partition against every other partition, rather than every Argument against every Argument... A type of reduced-map equality checking technique...
	Insert Into @Contains_Character_Pattern_Partition_Map ([Partition], [Character_Pattern])
	Select
		Row_Number() Over(Order By [Character_Pattern] Asc) As [Partition], --We are ordering by ascension, so Asc is used here...
		[Character_Pattern] As [Character_Pattern]
	From @Character_Patterns_For_Partitioning_Arguments_Distinct
	
	--Interleaved Partition Sort Merge
	Set @Loop_Count_0001 = 0
	Set @Partition_Row_Count = (Select Count(1) From @Contains_Character_Pattern_Partition_Map) --Partition rowset count calculation...
	While @Loop_Count_0001 < @Partition_Row_Count
		Begin
		
			Set @Loop_Count_0001 = (@Loop_Count_0001 + 1)

			--The actual sorting
			--We first store the partition extents in variables in order to minimise subsequent data lookup time...
			Set @Partition_Character_Pattern = (Select [Character_Pattern] As [Character_Pattern] From @Contains_Character_Pattern_Partition_Map Where [Partition] = @Loop_Count_0001)
			
			If @Partition_Transactionlet_Payload_Type = 'Sort'
				Begin
					Insert Into @Interleaved_Partition_Sort_Merge ([Partition_Order], [Partition_Character_Pattern], [Argument_Order], [Argument])
					Select
						@Loop_Count_0001 As [Partition_Order],
						[Contained_Character_Pattern] As [Partition_Character_Pattern],
						(Row_Number() Over(Order By [Argument] Asc)) As [Argument_Order], --Also, please feel free to implement your own fundamental sorting algorithm which slots into this line of code or similar, when applying this algorithm to your own usecase/coding language...
						[Argument]
					From @Pre_Transformed_Data
					Where @Partition_Character_Pattern = [Contained_Character_Pattern]
				End
			Else If  @Partition_Transactionlet_Payload_Type = 'Insert'
				Begin
					Insert Into @Interleaved_Partition_Sort_Merge ([Partition_Order], [Partition_Character_Pattern], [Argument_Order], [Argument])
					Select
						@Loop_Count_0001 As [Partition_Order],
						[Contained_Character_Pattern] As [Partition_Character_Pattern],
						(Row_Number() Over(Order By (Select Null))) As [Argument_Order], --Also, please feel free to implement your own fundamental sorting algorithm which slots into this line of code or similar, when applying this algorithm to your own usecase/coding language... Here, because of the nature of the overall system, we don't want to waste compute ordering arguments within transactionlet payload partition for this insert usecase... This should be done alongwith the other arguments in the destination partition where each transactionlet payload is deployed...
						[Argument]
					From @Pre_Transformed_Data
					Where @Partition_Character_Pattern = [Contained_Character_Pattern]
				End
			
		End

End

--Descending Sort
If @Sort_Polarity = 'Descending'
Begin
	
	--Order every partition against every other partition, rather than every Argument against every Argument... A type of reduced-map equality checking technique...
	Insert Into @Contains_Character_Pattern_Partition_Map ([Partition], [Character_Pattern])
	Select
		Row_Number() Over(Order By [Character_Pattern] Desc) As [Partition], --We are ordering by descension, so Desc is used here...
		[Character_Pattern] As [Character_Pattern]
	From @Character_Patterns_For_Partitioning_Arguments_Distinct

	--Interleaved Partition Sort Merge
	 --References to these two variables (@Loop_Count_0001 and @Data_Row_Count) are inverted here and in the subsequent sourcecode of this loop  (when compared to the ascending implementation above), because we are ordering by descent...
	Set @Loop_Count_0001 = 0
	Set @Partition_Row_Count = (Select Count(1) From @Contains_Character_Pattern_Partition_Map) --Partition rowset count calculation...
	While @Loop_Count_0001 < @Partition_Row_Count
		Begin
			
			Set @Loop_Count_0001 = (@Loop_Count_0001 + 1)

			--The actual sorting
			--We first store the partition extents in variables in order to minimise subsequent data lookup time...
			Set @Partition_Character_Pattern = (Select [Character_Pattern] As [Character_Pattern] From @Contains_Character_Pattern_Partition_Map Where [Partition] = @Loop_Count_0001)

			If @Partition_Transactionlet_Payload_Type = 'Sort'
				Begin
					Insert Into @Interleaved_Partition_Sort_Merge ([Partition_Order], [Partition_Character_Pattern], [Argument_Order], [Argument])
					Select
						@Loop_Count_0001 As [Partition_Order],
						[Contained_Character_Pattern] As [Partition_Character_Pattern],
						(Row_Number() Over(Order By [Argument] Desc)) As [Argument_Order], --Also, please feel free to implement your own fundamental sorting algorithm which slots into this line of code or similar, when applying this algorithm to your own usecase/coding language...
						[Argument]
					From @Pre_Transformed_Data
					Where @Partition_Character_Pattern = [Contained_Character_Pattern]
				End
			Else If  @Partition_Transactionlet_Payload_Type = 'Insert'
				Begin
					Insert Into @Interleaved_Partition_Sort_Merge ([Partition_Order], [Partition_Character_Pattern], [Argument_Order], [Argument])
					Select
						@Loop_Count_0001 As [Partition_Order],
						[Contained_Character_Pattern] As [Partition_Character_Pattern],
						(Row_Number() Over(Order By (Select Null))) As [Argument_Order], --Also, please feel free to implement your own fundamental sorting algorithm which slots into this line of code or similar, when applying this algorithm to your own usecase/coding language... Here, because of the nature of the overall system, we don't want to waste compute ordering arguments within transactionlet payload partition for this insert usecase... This should be done alongwith the other arguments in the destination partition where each transactionlet payload is deployed...
						[Argument]
					From @Pre_Transformed_Data
					Where @Partition_Character_Pattern = [Contained_Character_Pattern]
				End
			
		End

End


--The Results
If @Partition_Transactionlet_Payload_Type = 'Sort'
	Begin
		Select
			[Argument_Order] As [Argument_Order],
			[Argument] As [Argument]
		From @Interleaved_Partition_Sort_Merge
		--Order By [Order] --This 'Order By' clause is only necessary to display results in the right order in SQL Server... Most other programming contexts will not have this problem, because they don't have a paradigm where result sets are ordered at runtime, depending on query execution plans, which are inherently subject to change in SQL Server... Please remove this line of code when you speed test...
	End
Else If @Partition_Transactionlet_Payload_Type = 'Insert'
	Begin
		Select
			[Partition_Order] As [Partition_Order],
			[Partition_Character_Pattern] As[Partition_Character_Pattern],
			[Argument_Order] As [Argument_Order],
			[Argument] As [Argument]
		From @Interleaved_Partition_Sort_Merge
		--Order By [Order] --This 'Order By' clause is only necessary to display results in the right order in SQL Server... Most other programming contexts will not have this problem, because they don't have a paradigm where result sets are ordered at runtime, depending on query execution plans, which are inherently subject to change in SQL Server... Please remove this line of code when you speed test...
	End

--The following statment is kind of misleading, I know... But I couldn't quickly find another way to not execute the validation selects after this point, if the query is successfull...
Return


--Other exception cases...
Invalid_Sort_Polarity_Input_Argument:
Select 'Exception: The global variable (@Sort_Polarity), is out of scope for one of the following reasons... It is either not the string "Ascending" (without the double-quotes of course), is not the string "Descending" (without the double-quotes of course), or is either empty or null.'


Invalid_Data_Input_Argument:
Select 'Exception: The global variable (@Data), is out of scope for one of the following reasons... It is either not containing more than one row, or is empty.'