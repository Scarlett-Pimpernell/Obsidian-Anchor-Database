--MS_Obsidian_Expanded_Normalised_Index_Recompiled_Datetime2_Value_Reversion_Function


--The following few blocks of code create a new stored procedure which can be used in order to revert index recompiled datetime values to their datetime2 native data type.
Declare @Create_Function_Command Nvarchar(Max)
Set @Create_Function_Command = 
N'Create Function dbo.Obsidian_Expansion_Normalised_Index_Recompiled_Datetime_Value_Reverter
(
@Data Decimal(38, 19)
)
Returns Varchar(Max)
Begin

	--(USAGE GUIDANCE)
	--Please find here, a companion function algorithm, which has been designed to convert index recompiled datetime values, into datetime2 SQL Server native values... This function should be used on expansion normalised index recompiled datetime values, as these require the extra logic herein, to reverse the incumbent transformations which produced them!!!...
	--You can opt to cast the output Datetime2_Varchar value as a native Datetime2 SQL Server data type, if you like, within your own subsequent source code, in a step after this function gets executed, or wrapping around this query, as another method of function, which nests this function inside...


	-----Intrinsic SQL Server System Constants
	Declare @Datetime2_Range_Start_Date As Date
	Set @Datetime2_Range_Start_Date = ''0001-01-01''
	Declare @Datetime2_Range_Start_Index As Varchar(100)
	Set @Datetime2_Range_Start_Index = Cast(Format(@Datetime2_Range_Start_Date, ''yyyyMMddHHmmss.fffffff'') As Varchar(100))
	Declare @Datetime2_Range_End_Date As Date
	Set @Datetime2_Range_End_Date = ''9999-12-31''
	Declare @Datetime2_Range_End_Index As Varchar(100)
	Set @Datetime2_Range_End_Index = Cast(Format(@Datetime2_Range_End_Date, ''yyyyMMddHHmmss.fffffff'') As Varchar(100))
	Declare @Datetime2_Index_Range As Decimal(38, 19)
	Set @Datetime2_Index_Range = (Cast(@Datetime2_Range_End_Index As Decimal(38, 19)) - Cast(@Datetime2_Range_Start_Index As Decimal(38, 19)))

	Declare @Days_Of_the_Month Table ([Month] Varchar(100), [Normal_Days] Varchar(100), [Leap_Days] Varchar(100)) --Gregorian calendar
	Insert Into @Days_Of_the_Month
	Values --Please be aware that the [Month] column values must have padded zeroes to two digit places... For example 01 instead of 1... This is because we pad later on, in order to form proper date values...
	(''01'', ''31'', ''31''),
	(''02'', ''28'', ''29''), --Notice the different normal and leap values for month 2, in order to handle leap year in later logic in this algorithm...
	(''03'', ''31'', ''31''),
	(''04'', ''30'', ''30''),
	(''05'', ''31'', ''31''),
	(''06'', ''30'', ''30''),
	(''07'', ''31'', ''31''),
	(''08'', ''31'', ''31''),
	(''09'', ''30'', ''30''),
	(''10'', ''31'', ''31''),
	(''11'', ''30'', ''30''),
	(''12'', ''31'', ''31'')
	-----Intrinsic SQL Server System Constants


	--Data Prep Part 0001
	Declare @Data_Casted As Varchar(Max)
	Set @Data_Casted = Cast(@Data As Varchar(Max))
	
	--Data Validation Checks For Out Of Scope Parameters.
	If @Data_Casted Is Null GoTo Invalid_Data_Parameter_Value
	Declare @Decimal_Point_Index As Bigint
	Set @Decimal_Point_Index = Charindex(''.'', @Data_Casted)
	If @Decimal_Point_Index != 15
		If @Decimal_Point_Index != 14
			If @Decimal_Point_Index != 13
				If @Decimal_Point_Index != 12
					If @Decimal_Point_Index != 7
						If @Decimal_Point_Index != 6
							Begin
								GoTo Invalid_Data_Parameter_Value
							End
	If @Data_Casted Like ''%[^0-9.]%'' GoTo Invalid_Data_Parameter_Value
	
	--Data Prep Part 0002
	--We do not need to reformat if @Decimal_Point_Index = 15
	If @Decimal_Point_Index = 14
		Begin
			Set @Data_Casted = (''0'' + @Data_Casted)
		End
	Else If @Decimal_Point_Index = 13
		Begin
			Set @Data_Casted = (''00'' + @Data_Casted)
		End
	Else If @Decimal_Point_Index = 12
		Begin
			Set @Data_Casted = (''000'' + @Data_Casted)
		End
	--We do not need to reformat if @Decimal_Point_Index = 7
	Else If @Decimal_Point_Index = 6
		Begin
			Set @Data_Casted = (''0'' + @Data_Casted)
		End

	--The Reversion Transformation
	Declare @Reverted_Data As Varchar(Max)
	If Len(@Data_Casted) = 34
		Begin

			Declare @Year As Varchar(Max)
			Set @Year = Substring(@Data_Casted, 1, 4) --This value is re-used many times in the actual reversion method below, so makes sense to simply slice it out once for all, in terms of compute efficiency...
			Declare @Month As Varchar(Max)
			Set @Month = Substring(@Data_Casted, 5, 2) --This value is re-used many times in the actual reversion method below, so makes sense to simply slice it out once for all, in terms of compute efficiency...
			Declare @Day As Varchar(Max)
			Set @Day = Substring(@Data_Casted, 7, 2)  --This value is re-used many times in the actual reversion method below, so makes sense to simply slice it out once for all, in terms of compute efficiency...
			Declare @Days_In_Month As Varchar(Max)
			Set @Days_In_Month = (Select (Case When Cast(@Year As Int) % 400 = 0 Then [Leap_Days] Else (Case When Cast(@Year AS Int) % 100 = 0 Then [Normal_Days] Else (Case When Cast(@Year As Int) % 4 = 0 Then [Leap_Days] Else [Normal_Days] End) End) End) From @Days_Of_the_Month Where [Month] = Right((''0'' + Cast(Cast(Round(((Cast(@Month As Decimal(38, 19)) * Cast(12 As Decimal(38, 19))) / Cast(99 As Decimal(38, 19))), 0) As Bigint) As Varchar(Max))), 2))
			Declare @Hour As Varchar(Max)
			Set @Hour = Substring(@Data_Casted, 9, 2) --This value is re-used many times in the actual reversion method below, so makes sense to simply slice it out once for all, in terms of compute efficiency...
			Declare @Minute As Varchar(Max)
			Set @Minute = Substring(@Data_Casted, 11, 2) --This value is re-used many times in the actual reversion method below, so makes sense to simply slice it out once for all, in terms of compute efficiency...
			Declare @Second As Varchar(Max)
			Set @Second = Substring(@Data_Casted, 13, 2) --This value is re-used many times in the actual reversion method below, so makes sense to simply slice it out once for all, in terms of compute efficiency...
			Declare @Fractional_Second As Varchar(Max)
			Set @Fractional_Second = Substring(@Data_Casted, 16, 7) --This value is re-used many times in the actual reversion method below, so makes sense to simply slice it out once for all, in terms of compute efficiency...

			Set @Reverted_Data = Cast((@Year + ''-'' + Right((''0'' + Cast(Cast(Round(((Cast(@Month As Decimal(38, 19)) * Cast(12 As Decimal(38, 19))) / Cast(99 As Decimal(38, 19))), 0) As Bigint) As Varchar(Max))), 2) + ''-'' + Right((''0'' + Cast(Cast(Round(((Cast(@Day As Decimal(38, 19)) * Cast(@Days_In_Month As Decimal(38, 19))) / Cast(99 As Decimal(38, 19))), 0) As Bigint) As Varchar(Max))), 2) + '' '' + Right((''0'' + Cast(Cast(Round(((Cast(@Hour As Decimal(38, 19)) * Cast(23 As Decimal(38, 19))) / Cast(99 As Decimal(38, 19))), 0) As Bigint) As Varchar(Max))), 2) + '':'' + Right((''0'' + Cast(Cast(Round(((Cast(@Minute As Decimal(38, 19)) * Cast(59 As Decimal(38, 19))) / Cast(99 As Decimal(38, 19))), 0) As Bigint) As Varchar(Max))), 2) + '':'' + Right((''0'' + Cast(Cast(Round(((Cast(@Second As Decimal(38, 19)) * Cast(59 As Decimal(38, 19))) / Cast(99 As Decimal(38, 19))), 0) As Bigint) As Varchar(Max))), 2) + ''.'' + @Fractional_Second) As Varchar(Max)) --We reverse the expansion normalisation, by swapping the division and multiplication operands for each appropriate datepart...

		End
	Else If Len(@Data_Casted) = 26
		Begin
			--Currently should never be reached... So is currently deprecated...
			Set @Reverted_Data = Cast((Right((''0'' + Cast(Cast(Round(((Cast(Substring(@Data_Casted, 1, 2) As Decimal(38, 19)) * Cast(23 As Decimal(38, 19))) / Cast(99 As Decimal(38, 19))), 0) As Bigint) As Varchar(Max))), 2) + '':'' + Right((''0'' + Cast(Cast(Round(((Cast(Substring(@Data_Casted, 3, 2) As Decimal(38, 19)) * Cast(59 As Decimal(38, 19))) / Cast(99 As Decimal(38, 19))), 0) As Bigint) As Varchar(Max))), 2) + '':'' + Right((''0'' + Cast(Cast(Round(((Cast(Substring(@Data_Casted, 5, 2) As Decimal(38, 19)) * Cast(59 As Decimal(38, 19))) / Cast(99 As Decimal(38, 19))), 0) As Bigint) As Varchar(Max))), 2) + ''.'' + Substring(@Data_Casted, 8, 7)) As Varchar(Max)) --You may want to change the leading base date here, according to the needs of your usecase... AND, if you do, please remember its trailing space character!!!... We reverse the expansion normalisation, by swapping the division and multiplication operands for each appropriate datepart...
		End

	--The following codeblocks return useful data from the stored procedure
	Return @Reverted_Data

	Invalid_Data_Parameter_Value:
	Set @Reverted_Data = ''The input parameter (@Data), is out of scope for one of the following reasons... It is not of a magnitudinal length {the integer component of a Decimal(38, 19)} which is valid for datetime data (11 to 14 digits before the decimal point) or time data (5 to 6 digits before the decimal ponit)... Or, it is not of Decimal(38, 19) data type...''
	Return @Reverted_Data

	Invalid_Data_Parameter_Reversion:
	Return @Reverted_Data

End

';


If Not Exists (Select * From sysobjects Where name='Obsidian_Expansion_Normalised_Index_Recompiled_Datetime_Value_Reverter' and xtype='FN') --Make sure this function is not in use for another proprietary technique outside the Obsidian repository.
Execute sp_executesql @Create_Function_Command;