Select * From [MooDPrimaryElement] Order By [creationDateTime] Desc
Select * From [MooDElementData] Order By [creationDateTime] Desc
Delete From [MooDPrimaryElement] Where [creationDateTime] = '2025-03-03 08:01:17.000'
Delete From [MooDElementData] Where [creationDateTime] = '2025-03-03 08:01:17.000'


--Superfast Obsidian Hexadecimal-Compatible MooD Data Smashing Algorithm (To Be Used In A Custom T-SQL Synchroniser Script)
--This is a riskier version of the smash hash algorithm from a hexadecimal ID clash avoidance perspective, but you can make a compute speed performance gain so long as you accept this additional risk... This riskier algorithm allows each allowed hexadecimal hash characterto be used only twice (numbers 0 to 9 and letters A to F) across all field rows, thereby exponentially reducing the dimensionality, and making the probability of ID clashes slightly higher, but these Hex ID clashes may still only happen only several times in the whole future of the rest of the time-space continuum!!!... Only use this riskier hasher if you are utterly unconcerned by the posssibility of ID clashes in business standard sub-hyper scale data usecases, otherwise you will unwisely speed up computation, sometimes acceptably so...
--I have amended this approach, so that all the necessary hexadecimal hash IDs can be pre-generated in parallel, before element creation and field data ingestion, as this will provide probably very significant compute speed improvements.
--Please be aware, that the Hexadecimal ID hash technique in this algorithm is 'Near-Perfect', because it optimises the trade-off between uniform balancing of values via the maximum utilisation of value space, and the implementation of the most appropriate speediness of computation... Without any significant or necessary 'fudging' we can handle the reality that 32 character hexadecimal ID hashes require scaffolds with elements that don't fall neatly onto a single integer scale (ie_ they have non zero modulus 10 characteristics)... This is deemed therefore no longer a problem by the Vulcan authorities for now, because 4th age humanoids can simply implement my run-of-the-mill pixie science, in order to defeat the Borg when necessary...
--Now onto some Hobbit stats... I asked ChatGPT what the probability of ID clashing was with this algorithm as it stands currently... It calculated that ID clashes would happen (at lowest limit) every 1 in ~2.94√ó10^39 generated IDs (on average across an insane amount of generated IDs of course), but please bare in mind, that this version of the algorithm actually utilises a shared-value-pool technique, which randomly distributes values across the members of a Hex ID Hash set, in such a way, that the larger the hash set, the closer you get to the theoretical probability limit indicated here (In reality, the probability of Hex ID Hash clashes will be significantly higher, due to the likelihood of implementation with small hash set sizes, which in themselves could even be varied)... This is a vanishingly small number, and more than sufficient to ensure expected behaviour in almost all small data (1 Million IDs), medium data (1 Billion IDs), and big data (1 Trillion IDs) usecases... However, if you are implementing a hyper data (>= 1 Quadrillion IDs) usecase, then please consider using the more robust hexadecimal ID hashing algorithm that I will hopefully be releasing onto GitHub any day now... Keep your repentant 'sauron eyes' peeled!!!
--I am going to eventually implement an Obsidian custom table multi-locking prioritisation system in T-SQL, which needs to be used along with the table locking technique indicated at the end of this algorithm... Keep watch of GitHub over the coming days/weeks...
--So just an alert to the SQL Server community, but this algorithm and its two approaches will be literally game-changing to database performance... You simply have to decide whether to identify your data rows based on an incrementing integer ID, or a randomised hexadecimal ID hash... The handholding guidance would be: Use the hex ID hash approach for predominantly transactional (OLTP) systems (which have a higher rate of data row creation, and a lower rate of data row selection) {ideally with a pre-compute store of hashes which are ready immediately without any real-time live JIT writing/storing or computation of DATA}... BUT INSTEAD, use the incrementing integer ID approach for predominantly analytical (OLAP) systems (which have a lower rate of data row creation, and a higher rate of data row selection) {ideally with a distributed-batch data creation pipeline, so that the locking of database tables will not burdensomely afflict end-user data row selection requests}... The rationale behind this is simple-ish... To get maximum throughput in a transactional intense workload, you simply want to have IDs ready to apply to transactions, without compute (which is the strength of the hexadecimal ID hash approach)... To get minimum latency in an analytical intense workload, you simply want to have IDs that can easily be searched with the smallest amount of compute (which is the strength of using integers as IDs, because they are typically of smaller size in memory and so are easier to fetch, but also, they require far less complex computations for things like matching, ordering, and other types of equality checks, because of the more basic and optimisable nature of numbers as opposed to strings)...


--(Global)
--Scaffold...
Declare @Obsidian_Index_Scaffold_Hashes Table ([Raw_Index] Int, [Hashed_Index] Char(1))
Insert Into @Obsidian_Index_Scaffold_Hashes ([Raw_Index], [Hashed_Index])
Values (1, '0'), (2, '0'), (3, '1'), (4, '1'), (5, '2'), (6, '2'), (7, '3'), (8, '3'), (9, '4'), (10, '4'), (11, '5'), (12, '5'), (13, '6'), (14, '6'), (15, '7'), (16, '7'), (17, '8'), (18, '8'), (19, '9'), (20, '9'), (21, 'A'), (22, 'A'), (23, 'B'), (24, 'B'), (25, 'C'), (26, 'C'), (27, 'D'), (28, 'D'), (29, 'E'), (30, 'E'), (31, 'F'), (32, 'F')


--(Elements)
--Scaffold Scramble...
Declare @Obsidian_Index_Scaffold_Element_Scrambled_Intermediate Table ([Order] Int, [Hashed_Index] Char(1))
Insert Into @Obsidian_Index_Scaffold_Element_Scrambled_Intermediate ([Order], [Hashed_Index])
Select
	(Row_Number() Over(Order By Crypt_Gen_Random(7) Asc)) As [Order], --This should scramble the index series appropriately, when used in conjunction with storing an order for each scrambled row... You can reduce this crypto number if you are only handling small amounts of data, and if you are handling large amounts of data, you probably want to concatenate multiple crypto numbers at maximum byte size each time... (Some Math: You need 7 characters to account for at least 3,200 permutations {32 scaffold indexes multiplied by 100 to give ample room for mostly-non-clashing manoeuvre}... This is why I have now standard-optimised this crypto number length... Otherwise it massively slows down the algorithm without any actual benefit... To determine the crypto number length you need for usecase, which will cover the permutations, multiply your scaffold index count by a sensible number like 100... Then we need to find the smallest number n, such that: ùëõ! ‚â• 3,200... This can be searched manually by gradually increasing n while recalculating each time, or you can implement a calculation to the same effect!!!)...
	[Hashed_Index] As [Hashed_Index]
From @Obsidian_Index_Scaffold_Hashes

--Rejoin Hash...
Declare @Element_Hexadecimal_ID_Hash As Char(32)
Set @Element_Hexadecimal_ID_Hash =
(
Select
	String_Agg(B.[Hashed_Index], '') As [Hexadecimal_ID_Hash] --Be careful, the hash values are joined in no particular order... This may impact associated development work... If it is causing an issue, you can easily force the order by integrating the 'Str_Agg' function optional 'Within Group (Order By [Some_Sort_Of_Order_Logic] Asc)' into this line of sourcecode, in the appropriate manner... A.[Raw_Index] would probably be a suitable candidate to order on here...
From @Obsidian_Index_Scaffold_Hashes A
Inner Join @Obsidian_Index_Scaffold_Element_Scrambled_Intermediate B On
	(B.[Order] = A.[Raw_Index])
)

--(Something Seemingly Banal, Will Probably Turn Out To Be the Critical Algorithmic Facet... No Doubt...)
Declare @Max_Element_cluId As Bigint
Set @Max_Element_cluId = (Select Max([cluId]) From [MooDPrimaryElement])

--PLEASE DON'T FORGET TO AMEND THESE INSERTED ROW VALUES BELOW APPROPRIATELY... YOU WILL NEED TO LOOK UP THE [parentId] (IF YOU ARE NOT CREATING THE PARENT ELEMENT HERE ITSELF) ON THE [MooDPrimaryElement] TABLE IN THE MOOD DATABASE; AND THE YOU WILL NEED TO LOOK UP THE [aliasId] FROM THE [MooDAlias] TABLE IN THE MOOD SQL SERVER DATABASE... THE REST OF THE COLUMNS SHOULD BE RATHER SELF-EXPLANATORY IN MY HUMBLE OPINION... (IF YOU ARE CREATING PARENT ELEMENTS {OR EVEN A TREE OF ELEMENTS, THEN MAKE SURE YOU PUT THE HIGHEST LEVEL OF THE TREE TOWARDS THE TOP OF THE INSERT ROWS, AND ORDER THE ROWS SO THAT ALL DESCENDENTS WILL ALWAYS COME AFTER THEIR PARENT ELEMENT ROW... THEN SIMPLY WHILE LOOP AROUND THE INSERT SET OF ROWS, ONE LEVEL OF THE ELEMENT HIERARCHY AT A TIME [SO THAT YOU CAN PRE-GENERATE THE APPROPRIATE HEXADECIMAL IDENTIFIERS]})... OH, AND PLESE DON'T FORGET TO INCREMENT THE CLUID IF YOU ARE SIMULTANEOUSLY INSERTING MULTIPLE ELEMENT ROWS (HE'S MISBEHAVING ENOUGH ALREADY, I'M SURE YOU'LL AGREE)...
Set Identity_Insert [MooDPrimaryElement] ON
Insert Into [MooDPrimaryElement] ([className], [id], [parentId], [aliasId], [ownerId], [name], [variantOfId], [lastModifiedDateTime], [creationDateTime], [flags], [cluId])
Values ('PRIM', @Element_Hexadecimal_ID_Hash, '3708862BD1CD47458E9B65CED5DB79B4', '03AFE16743A3455889C46D09A05D55F1', '786A4991EA7B11D1B4840020AFC894E9', ('Database_Edit_Test_' + Cast(Getdate() As Nvarchar(4000))), NULL, '2025-03-03 08:01:17.000', '2025-03-03 08:01:17.000', 0, (@Max_Element_cluId + 1))
Set Identity_Insert [MooDPrimaryElement] OFF


--THE FOLLOWING DATA FIELD TECHNIQUE MUST BE CARRIED FOR EACH APPROPRIATE FIELD ON A GIVEN PREVIOUSLY CREATED MOOD ELEMENT IN THIS SMASH ALGORITHM, BECAUSE OTHERWISE, THE ELEMENTS MAY BE UNEDITABLE IN MOOD BA AND MOOD MAE!!!... AS SUCH, IF YOU ARE INGESTING A LOT OF FIELD DATA, YOU PROBABLY WANT TO IMPLEMENT THE REST OF THIS ALGORITHM WITHIN A WHILE LOOP, WHICH WOULD LOOP AROUND EACH MOOD ELEMENT FIELD, INSTEAD OF WHAT I HAVE DONE HERE, WHICH IS SIMPLY COPY AND PASTE HAND-CRANKING, BECAUSE I AM APPARENTLY NOT YET RECEIVING PAYMENT FOR MY EFFORTS!!!
--(Fields)
--Scaffold...
Declare @Field_Count As Bigint
Set @Field_Count = 3
Declare @Dynamic_SQL As Nvarchar(Max)
Set @Dynamic_SQL =
(
'Declare @Number_Seeds Table ([Number_Seed] NvarChar(1))
Insert Into @Number_Seeds ([Number_Seed])
Values (''0''), (''1''), (''2''), (''3''), (''4''), (''5''), (''6''), (''7''), (''8''), (''9'') ' +
Replace(dbo.Obsidian_Element_Index_Generator_Code_Parallel_Super_Fast(32), '@Index_Count', @Field_Count) --This algorithm can be found on my GitHub account in the same repository that you found this script in.
)

Declare @Obsidian_Index_Scaffold_Field Table ([Index] Int)
Insert Into @Obsidian_Index_Scaffold_Field ([Index])
Execute (@Dynamic_SQL)

--Scaffold Scramble...
Declare @Obsidian_Index_Scaffold_Field_Scrambled_Intermediate Table ([Order] Int, [Hashed_Index] Char(1))
Insert Into @Obsidian_Index_Scaffold_Field_Scrambled_Intermediate ([Order], [Hashed_Index])
Select
	Row_Number() Over(Order By Crypt_Gen_Random(8) Asc) As [Order], --This should scramble the index series appropriately, when used in conjunction with storing an order for each scrambled row... You can reduce this crypto number if you are only handling small amounts of data, and if you are handling large amounts of data, you probably want to concatenate multiple crypto numbers at maximum byte size each time... (Some Math: You need 8 characters to account for at least 9,600 permutations {32 scaffold indexes multiplied by the number of fields [in this case 3], multiplied by 100 to give ample room for mostly-non-clashing manoeuvre}... This is why I have now standard-optimised this crypto number length... Otherwise it massively slows down the algorithm without any actual benefit... To determine the crypto number length you need for usecase, which will cover the permutations, multiply your scaffold index count by your field count, and then multiply by a sensible number like 100... Then we need to find the smallest number n, such that: ùëõ! ‚â• 9,600... This can be searched manually by gradually increasing n while recalculating each time, or you can implement a calculation to the same effect!!!)...
	B.[Hashed_Index] As [Hashed_Index]
From @Obsidian_Index_Scaffold_Field A
Cross Join @Obsidian_Index_Scaffold_Hashes B

--Rejoin Hash...
Declare @Field_Hexadecimal_ID_Hashes Table ([Order] Bigint, [Hexadecimal_ID_Hash] Varchar(Max))
Insert Into @Field_Hexadecimal_ID_Hashes ([Order], [Hexadecimal_ID_Hash])
Select
	(Row_Number() Over(Order By (Select 1) Asc)) As [Order],
	String_Agg(B.[Hashed_Index], '') As [Hexadecimal_ID_Hash] --Be careful, the hash values are joined in no real particular order, which is more than fine for most usecases, but for some, this may impact associated development work... If it is causing an issue, you can easily force the order by amending the logic in 'Within Group (Order By [Some_Sort_Of_Order_Logic] Asc)' on this line of sourcecode, in an appropriate manner...
From @Obsidian_Index_Scaffold_Field A
Inner Join @Obsidian_Index_Scaffold_Field_Scrambled_Intermediate B On
	(B.[Order] > ((A.[Index] - 1) * 32) And B.[Order] < ((A.[Index] * 32) + 1))
Group By A.[Index]

--(Something Seemingly Banal, Will Probably Turn Out To Be the Critical Algorithmic Facet... No Doubt...)
Declare @Max_Field_cluId As Bigint
Set @Max_Field_cluId = (Select Max([cluId]) From [MooDElementData])

--PLEASE DON'T FORGET TO AMEND THESE INSERTED ROW VALUES BELOW APPROPRIATELY... YOU WILL NEED TO LOOK UP THE [aliasDefFieldId] OR [pickListItemId] FROM THE APPROPRIATE TABLE ([MooDAliasDefField] AND ???[MooDAliasDefSimpleTypePickItem]??? RESPECTIVELY), IN THE MOOD SQL SERVER DATABASE, AND AS SUCH, YOU MUST MAKE SURE THAT YOU PRE-CREATE ALL THE ELEMENTS YOU NEED TO INGEST DATA ONTO... AS WELL AS ANY DESIRED FIELD VALUES IN THEIR RESPECTIVE COLUMNS... OH, AND PLESE DON'T FORGET TO INCREMENT THE CLUID IF YOU ARE SIMULTANEOUSLY INSERTING MULTIPLE FIELD ROWS (HE'S MISBEHAVING ENOUGH ALREADY, I'M SURE YOU'LL AGREE)...
Set Identity_Insert [MooDElementData] ON
Insert Into [MooDElementData] ([className], [id], [subjectId], [subjectType], [aliasDefFieldId], [pickListItemId], [intVal], [boolVal], [dateVal], [realVal], [stringVal], [lastModifiedDateTime], [creationDateTime], [flags], [cluId])
Values
('DTME', (Select [Hexadecimal_ID_Hash] From @Field_Hexadecimal_ID_Hashes Where [Order] = 1), @Element_Hexadecimal_ID_Hash, 55, '03AFE16743A3455812A451C50BFA4E8F', NULL, 0, 0, '2025-03-03 08:01:17.000', 0, NULL, '2025-03-03 08:01:17.000', '2025-03-03 08:01:17.000', 0, (@Max_Field_cluId + 1)),
('INTE', (Select [Hexadecimal_ID_Hash] From @Field_Hexadecimal_ID_Hashes Where [Order] = 2), @Element_Hexadecimal_ID_Hash, 55, '03AFE16743A34558267EA4BF58D44792', NULL, 88888888, 0, NULL, 0, NULL, '2025-03-03 08:01:17.000', '2025-03-03 08:01:17.000', 0, (@Max_Field_cluId + 2)),
('STRN', (Select [Hexadecimal_ID_Hash] From @Field_Hexadecimal_ID_Hashes Where [Order] = 3), @Element_Hexadecimal_ID_Hash, 55, '03AFE16743A3455878F145AD37214F08', NULL, 0, 0, NULL, 0, '88888888', '2025-03-03 08:01:17.000', '2025-03-03 08:01:17.000', 0, (@Max_Field_cluId + 3))
Set Identity_Insert [MooDElementData] OFF
--For now, we have hard coded the Hex ID Hash references... This could be re-purposed with a clever select join, to apply Hex ID Hashes to a given column of field data that you want to smash into MooD!!!... Speak to me if you need this done, and can't quite get your head around the implementation...

Select 1 --This seems to be necessary for MooD, in order to avoid spurious synchroniser fail messages in the BA audit and validation interface, but also to avoid falsely concerning error messages which would otherwise get displayed to the user via an MAE action (such as clicking a button which executes a custom SQL synchroniser).

/*
--Please be aware, that you must never execute a smash command while other users or synchronisers have access to select, update, or delete from the table that you are smashing, otherwise you can corrupt the database... As such it is wise to execute the following command some how, in conjunction with your smash algorithm:
Begin Tran M3 --M3 is the arbitrary name I have given the transacation in this example...
Insert Into [MooDPrimaryElement] WITH (TABLOCK) (/*Add Column Names Here... Each With Square Brackets Around Them... and Of Course Separated By Commas*/) --You would implement your smash insert logic here, with an appropriate combining of the locking feature of SQL Server (Tablock) {which actually behaves like Tablockx with respect to insert statements}...
Select /*Add Column Assignations and Names Here... and Of Course Separate the Columns By Commas*/ From [MooDPrimaryElement] --This is the placeholder for the Select statement which gets the data for the smash insert...
Commit Tran M3 --It is important to commit the transaction as soon as the insert select completes, so that the table lock can be rapidly freed... Otherwise the smash will likely have no real effect on data in the database, or there may be a lot of user waiting around and even solution crashes...
*/