--MS_Obsidian_Superfast_Starfleet_Random_Integer_Hash_ID_Generator
--With this algorithm, you're generating integer string hashes, comprised of single digit integer numbers (0 to 9), where each digit is indexed from a scrambled and deconstructed number partition, with π (pi) itself providing the necessary decimal sequence predicate for the partitioning regime (which is itself an irrational, class-balanced, almost certainly 'fully' randomicit, number, with an infinite decimal precision limit {so long as you don't run out of atoms in the universe to store it with}... This gives the algorithm theoretically 'infinite virtual potential')... As a result, the combinatorial search space for each digit of a generated Starfleet Integer Hash ID, is linearly proportional to its character length, as follows:
--GENERAL COMBINATORIAL COMPLEXITY CALCULATION : (10 (single digit integer range) ^40 (typical digit hash length)) x 10^8 (Terran seed range {currently limited by the data type decimal precision in SQL Server}) x 10^8 (Vulcan seed range {currently limited by the data type decimal precision in SQL Server}) x 10^8 (Andorian seed range {currently limited by the data type decimal precision in SQL Server}) x 10^1 (maximum hash shift positions {currently limited by the data type decimal precision in SQL Server}) x 10^1 (space dilation {dimensional pillar delta}) x 10^1 (temporal distortion {system state clocking}) = 10^67... This is an extremely large number, much larger than a VI(R)GINTILLION in short-scale naming... In other words, insanely complex (and that's completely ignoring the fact that it is derived from a completely random foundation sequence)... No one is ever going to ever be able to cyber-hack this algorithm in any kind of reasonable (and I would say even significantly fictitious) reality, providing you don't do something really stupid with its application to your problem context...
--As you can probably tell by now therefore, ChatGPT thinks that this is a very random number generator indeed!!!... Please be aware though, that cyber security is only ensured, so long as @Hash_Seeds (All of Terran, Vulcan, and Andorian) are kept private (and to be honest, you probably want to keep all the assigned global variable values private, for the same reason!!!)...
--'Keep your eyes peeled' (Non-Andorians only of course... Wouldn't want to offend their Augur-Prime) for an additional temporal distortion technique (THIS IS NOW IMPLEMENTED IN THE ALGORITH!!!)... Used to be releasing anytime soon!!!... It will hopefully mean that even if somehow a cyber adversary obtained your @Hash_Seeds, the additional calculations needed to temporally anti-distort the generated hashes would be so obscene in both count size and compute size (you would need to have monitored the exact CPU state and timings of each computation, which is most intractable to say the least, even for insiders like Starfleet engineers), that simply put, no one would ever actually 'bother you' about it... They would essentially be searching an infinitessimal part of the combinatorial search space, for half of 'universal eternity', and making no progress... Kinda like a Terran trying to explain euphoria to a vulcan with much badly hidden schadenfreude, and then realising with excruciating abasement, that upon talking to your average Andorian later that evening, Terran euphoria is like comatosis in comparison to Andorian 'Raptulation'!!!... What is more, the dilation of the time-space continuum (see later in this algorithm) which occurs when using this algorithm, has been theorised as the source of Bynar free-will... It may actually boost the combinatorial search space up to (10^40)^10) or 10^400, which gives Bynars the ability to make anywhere up to ten centillion possible decision variants in their lifetime!!!... They claim that Terrans enjoy considerably less largesse, and for obvious reasons, no hate intended!!!... Don't quote me on these stats (I can't be bothered to actually work them out... Besides, there is a conceptual and philosophical debate yet to be had, surrounding the difference between combinatorial and complexial algorithm stats!!!)

--Please note, that the reason I have chosen the Pi number as the basis of randomicity is as follows:
--The digits of π (pi) are basically the universe's best 'foundationally intrinsic' attempt to provide mankind with the perfect random sequence generator.. Here’s a breakdown of why:
--1. π (pi) is Deterministic --> Which is necessary, in order to actually compute a reliable output.
--2. The classes of π (pi) are Uniformly Distributed --> This means that in the known decimal expansions, each digit (0 to 9) appears roughly equally often.
--3. The sequence of π (pi) digits is Statistically Random --> Ideal, because there are no obvious meta-patterns that repetitively occur.
--4. The limit of π (pi) is Normal --> Basically indicating, that its infinite decimal expansion will propagate the first three properties with the utmost fidelity.
--5. Simulated Chaos arising from deconstructed π (pi) derivations --> Should however, mean that small changes in global variables, can emulate maximally possible quantum-random behaviour on digital hardware.
--In conclusion, I would stop using all other random integer generators pronto, and come join +Raphael+ in the superiority-takes-all space conquest... It starts with Terran-operated bases on the moon this decade, and is quickly followed up by speciating-humanoid colonies on Mars, this half century!!!

--Please note, that during very minimal testing, repeated executions of the query, while temporal distortion was engaged, sometimes generated the same Hash IDs... I can only imagine that this is because query caching is turned on... Please remember to disable query caching for this algorithm, if you are using temporal distortion features!!!... Of course, once the query has cached as temporally distorted, and you amend the associated toolean global variables, query caching will likely also adversely affect the desired output from the algorithm... SO PLEASE ALWAYS TURN OFF QUERY CACHING INFACT!!!

--I also have theories regarding next-generation completely-superior advanced usecases for random number generators (algorithm blueprints designed already)... More on this, once I get a job or a customer...
--One idea I will providing a solution for can be called something like Native Augmentable Physics Simulation (NAPS)... This is a trick I learned from Master Jedi 'Yoda the Best' himself!!!


--(NECESSARY METAVARIABLE SETTINGS)
--I would like a setting to turn of query caching for all plans in this query, without having to specify for individual statements, and I certainly don't want to turn of query plans for the whole database... Come on Microsoft... Why have you not already enabled this functionality???... It seems pretty universally useful!!!...


--(GLOBAL VARIABLES)
Declare @Hash_Seed_Terran Bigint
Set @Hash_Seed_Terran = 17 --1 >= x <= 100,000,000,000 ... Nota Bene: The lower the Hash Shift, the more likely it is that you will want a lower Hash Seed value... The Terran Hash Seed value must be different from the Vulcan and Andorian Hash Seed values, in order to avoid a Starfleet civil war!...

Declare @Hash_Seed_Vulcan Bigint
Set @Hash_Seed_Vulcan = 4000 --1 >= x <= 100,000,000,000 ... Nota Bene: The lower the Hash Shift, the more likely it is that you will want a lower Hash Seed value... The Vulcan Hash Seed value must be different from Terran and Andorian Hash Seed values, in order to avoid a Starfleet civil war!...

Declare @Hash_Seed_Andorian Bigint
Set @Hash_Seed_Andorian = 831228 --1 >= x <= 100,000,000,000 ... Nota Bene: The lower the Hash Shift, the more likely it is that you will want a lower Hash Seed value... The Andorian Hash Seed value must be different from Terran and Vulcan Hash Seed values, in order to avoid a Starfleet civil war!...

Declare @Hash_Shift Bigint
Set @Hash_Shift = 6 --1 >= x <= 10 ... Lower hash shift values will produce more randomicit integer hashes at smaller hash lengths; whereas, larger hash shift values will lead to more randomicit consecutive repetitions of integer hashes at larger hash lengths... This mechanism is a trade-off... If you are unsure which value to use, simply set the value to 1 for default behaviour which is more similar to exisiting class-probability-balanced random number generators... Nota Bene: The higher the Hash Seeds, the more likely it is that you will want a higher Hash Shift value... My advice, is experiment a little!... Disclaimer: I'm not even entirely sure if this variable control is really all that useful outside of theory, and haven't been able to test it in an applied manner, to my usual satisfaction and significance criteria...

Declare @Hash_Value_Length Bigint
Set @Hash_Value_Length = 40 --1 >= x < 8,000... Any longer, and I fear that you may be up to something quite dangerous to the strategic goals of Starfleet!!!

Declare @Hash_Array_Length Bigint
Set @Hash_Array_Length = 1000 --1 >= x < As big as y're rig can handle...

--PLEASE BE AWARE: You shouldn't use the three temporal distortion features here below, if you require repeatability as a property of your outputs... If repeatanbility is required, then set all three of these variables to zero (0)...
--When a hash seed is low, ie below 50 Million, then you probably would want a positive temporal distortion, for obvious reasons... But, when hash seed is high howver, i.e. above 50 Million, then you probably would benefit more from setting a corresponding negative temporal distortion, if any at all in either case...
Declare @Temporal_Distortion_Toolean_Terran Int
Set @Temporal_Distortion_Toolean_Terran = 0 --Can be set to either the number minus one (negatively engaged) or zero (disengaged) or the number one (positively engaged)... This feature has been injected directly into the seeds, rather than into the Hash ID serving transformation below, due to the desire to minimise unnecessary compute.. With the seeds being distorted, it only takes three very simple computations, whereas with the servings being distorted, the additional computational load could be unacceptable due to the exponential nature of that part of the algorithm (which I hasten to add, would infact provide more computational complexity, but no more additonal cyber security, as opposed to simply distorting the seed values)...

Declare @Temporal_Distortion_Toolean_Vulcan Int
Set @Temporal_Distortion_Toolean_Vulcan = 0 --Can be set to either the number minus one (negatively engaged) or zero (disengaged) or the number one (positively engaged)... This feature has been injected directly into the seeds, rather than into the Hash ID serving transformation below, due to the desire to minimise unnecessary compute.. With the seeds being distorted, it only takes three very simple computations, whereas with the servings being distorted, the additional computational load could be unacceptable due to the exponential nature of that part of the algorithm (which I hasten to add, would infact provide more computational complexity, but no more additonal cyber security, as opposed to simply distorting the seed values)...

Declare @Temporal_Distortion_Toolean_Andorian Int
Set @Temporal_Distortion_Toolean_Andorian = 0 --Can be set to either the number minus one (negatively engaged) or zero (disengaged) or the number one (positively engaged)... This feature has been injected directly into the seeds, rather than into the Hash ID serving transformation below, due to the desire to minimise unnecessary compute.. With the seeds being distorted, it only takes three very simple computations, whereas with the servings being distorted, the additional computational load could be unacceptable due to the exponential nature of that part of the algorithm (which I hasten to add, would infact provide more computational complexity, but no more additonal cyber security, as opposed to simply distorting the seed values)...


--(EXECUTION)
Declare @Temporal_Distortion_Engaged_Boolean As Tinyint
--The following If statements help avoid unnecessary compute...
If @Temporal_Distortion_Toolean_Terran != 0
	Begin
		Set @Temporal_Distortion_Engaged_Boolean = 1
	End
If @Temporal_Distortion_Toolean_Vulcan != 0
	Begin
		Set @Temporal_Distortion_Engaged_Boolean = 1
	End
If @Temporal_Distortion_Toolean_Andorian != 0
	Begin
		Set @Temporal_Distortion_Engaged_Boolean = 1
	End
If @Temporal_Distortion_Engaged_Boolean = 1
	Begin
		--Temporal_Distortion
		Declare @Current_System_State_Clock_Index_Partition As Varchar(8)
		Set @Current_System_State_Clock_Index_Partition = Right(Replace(Replace(Replace(Replace(Cast(Sysutcdatetime() As Varchar(Max)), '-', ''), ' ', ''), ':', ''), '.', ''), 8) --I have partially 'reverse sliced' the granularity here (the 'full reversing' takes place later on in the algorithm), because for my database, the year comes first in this value, and the greatest precision seconds decimal comes last... Whereas, you always want the least geranularity last (the year segment), and the greatest granularity first (the highest precision sub-second)... If you do not properly handle this dynamic (which arises due to different datetime2 formats across different databases, when calling the Sysutcdatetime() function), then your temporal distortion will be less than ideal, and possibly pointless, in terms of maximising cyber security protections... Nota Bene: In this current implementation, we are only using part of the Sysutcdatetime() function Datetime2 output value (This will need to be amended in cases where greater Hash Seed data type precisions are enabled in SQL Server)...
		--This temporal dilator technique must use fractional numbers up to and including the first seconds digit (from greatest decimal precision digit up to single digit seconds, which in this case provides 8 consecutive digits), but no more than this, such as also using hours or days etc_, because otherwise the temproal distortion would be biased and potentially easier to cyber hack (hours for example, don't cover all numbers between zero and ninety nine... they only cover twenty four at most, which means the distribution of outputs would be skewed to lower numbers {Especially in the less precise hour digit}...)...

		--Manual transformation step I know, but its only 8 values right now, given the size of the Hash Seed ranges... Speak to a Catholic priest if this shortcut upsets you...
		Declare @Temporal_Distortion_Index Table ([Order] Tinyint, [Clock_Index] Tinyint)

		Declare @Normalised_Zero_Injection_Count As Bigint
		Set @Normalised_Zero_Injection_Count = Round((((Cast(Substring(@Current_System_State_Clock_Index_Partition, 8, 1) As Decimal(38, 36)) + 1) / Cast(10 As Decimal(38, 36))) * Cast(7 As Decimal(38, 36))), 0) --We use the greatest precision limit integer to decide how many zeroes we are injecting into the clock index (so that we can later fully utilise the full Hash Seed range when temporally distorting)... Otherwise, only very small temporal perturbations would occur, which would significantly reduce the cyber defensive power of this temporal distortion technique... We have used plus 1 with the raw clock index substring value, in order to avoid ever returning a zero (as this would later lead to divide zero errors... This corresponding shift in the range from zero to nine (0 to 9), to now one to ten (1 to 10), has been balanced out, by dividing with a value of 10 {called proportional or output normalisation}... Please also note, the alteration from the typical Decimal(38, 37) {which would have worked with an upper range limit of nine (9)}, but because we now have an upper range limit of ten (10), we need to use the {Decimal(38, 36)} data type here, in order to avoid arithmetic overflows or something like that, where the number can't be stored as it is larger than the variable data type)... and also plus 1 with the overall normalised value, in order to make the algorithm slightly more efficent in terms of subsequent equality operator mechanics... We normalise onto a scale from one to seven, for obvious reasons (divide zero errors and misaligned ranges {we currently only want eight digits in our distortion capability (with no possibility of producing an overall zero), whereas nines and tens could appear some times, unless we normalise them out})...

		--Rebuild of the clock index
		Declare @Loop_Count_0001 As Bigint
		Set @Loop_Count_0001 = 0
		--This following loop basically injects the zeroes...
		While @Loop_Count_0001 < 8 --Eight is the 'reverse sliced' clock index length...
			Begin
		
				Set @Loop_Count_0001 = (@Loop_Count_0001 + 1)
		
				If @Loop_Count_0001 = 8
					Begin
						Insert Into @Temporal_Distortion_Index ([Order], [Clock_Index])
						Values (Cast(@Loop_Count_0001 As Tinyint), Cast(Substring(@Current_System_State_Clock_Index_Partition, (@Loop_Count_0001 - @Normalised_Zero_Injection_Count), 1) As Tinyint)) --(@Loop_Count_0001 - @Zero_Injection_Count) because you want to always use the most dynamic and frequently changing digit integers first... Unfortunately, because of lack of system datetime precision, the first clock index integer is used in order to determine how many zeroes are injected, and is also re-used here, but this seems conceptually polluted in some minor way to me right now...
					End
				Else If @Loop_Count_0001 < @Normalised_Zero_Injection_Count
					Begin
						Insert Into @Temporal_Distortion_Index ([Order], [Clock_Index])
						Values (Cast(@Loop_Count_0001 As Tinyint), Cast(0 As Tinyint))
					End
				Else If @Loop_Count_0001 >= @Normalised_Zero_Injection_Count
					Begin
						Insert Into @Temporal_Distortion_Index ([Order], [Clock_Index])
						Values (Cast(@Loop_Count_0001 As Tinyint), Cast(Substring(@Current_System_State_Clock_Index_Partition, (@Loop_Count_0001 - @Normalised_Zero_Injection_Count), 1) As Tinyint)) --(@Loop_Count_0001 - @Zero_Injection_Count) because you want to always use the most dynamic and frequently changing digit integers first... Unfortunately, because of lack of system datetime precision, the first clock index integer is used in order to determine how many zeroes are injected, and is also re-used here, but this seems conceptually polluted in some minor way to me right now...
					End
			End

		--This codeblock fully reverses the system clock slice (With the Desc keyword)...
		Declare @Current_System_State_Clock_Index_Partition_Descending_Order As Decimal(38, 29)
		Set @Current_System_State_Clock_Index_Partition_Descending_Order = Cast((Select String_Agg(Cast([Clock_Index] As Varchar(8)), '') Within Group (Order By [Order] Desc) As [Zero_Injected_Clock_Index] From @Temporal_Distortion_Index) As Decimal(38, 29)) --Just an acknowledgement of algorithmic shortfall here, but because SQL Server doesn't provide date time data types with at least 8 digit decimal precision (it currently maxes out at 7 digits), we never actually distort hash seeds using the single digit integer position (there will currently always be a trailing zero)... Not ideal, but arguably okay, because you probably want greater time distortions anyways...
		
		--We can now distort our hash seeds appropriately, as follows...
		Declare @Temporal_Distortion_Granularity_Step_Size As Decimal(38, 29)
		Set @Temporal_Distortion_Granularity_Step_Size = (Cast(99999999 As Decimal(38, 29)) / @Current_System_State_Clock_Index_Partition_Descending_Order) --Please make sure that this 100 million value remains in synchronisation with the rest of the algorithm, if amending in any significant way (for example greater precision data types and therefore larger seed ranges)... Also make sure it is in synchronisation with the seed range limit data validation constraints (Which I haven't actually implemented here, but simply mentioned in the comments above)...

		--1. Terran Temporal Distortion
		If @Temporal_Distortion_Toolean_Terran = -1
			Begin
				Set @Hash_Seed_Terran = (Case When @Hash_Seed_Terran = 1 Then 0 Else Floor((Cast(@Hash_Seed_Terran As Decimal(38, 29)) - ((@Temporal_Distortion_Granularity_Step_Size / Cast(100000000 As Decimal(38, 29))) * Cast(@Hash_Seed_Terran As Decimal(38, 29))))) End) --We normalise the temproal distortion of the Hash Seed, by harmonising with the distance between the Hash Seed and its polar limit... The Floor() function is used here, in order to correctly handle decimal @Temporal_Distortion_Granularity_Step_Size values, when negatively distorting via a subtraction operand on this line of sourcecode...
			End
		Else If @Temporal_Distortion_Toolean_Terran = 1
			Begin
				Set @Hash_Seed_Terran = (Case When @Hash_Seed_Terran = 1 Then 0 Else Ceiling((Cast(@Hash_Seed_Terran As Decimal(38, 29)) + ((@Temporal_Distortion_Granularity_Step_Size / Cast(100000000 As Decimal(38, 29))) * Cast(@Hash_Seed_Terran As Decimal(38, 29))))) End) --We normalise the temproal distortion of the Hash Seed, by harmonising with the distance between the Hash Seed and its polar limit... The Ceiling() function is used here, in order to correctly handle decimal @Temporal_Distortion_Granularity_Step_Size values, when positively distorting via an addition operand on this line of sourcecode...
			End
		--2. Vulcan Temporal Distortion
		If @Temporal_Distortion_Toolean_Vulcan = -1
			Begin
				Set @Hash_Seed_Vulcan = (Case When @Hash_Seed_Vulcan = 1 Then 0 Else Floor((Cast(@Hash_Seed_Vulcan As Decimal(38, 29)) - ((@Temporal_Distortion_Granularity_Step_Size / Cast(100000000 As Decimal(38, 29))) * Cast(@Hash_Seed_Vulcan As Decimal(38, 29))))) End) --We normalise the temproal distortion of the Hash Seed, by harmonising with the distance between the Hash Seed and its polar limit... The Floor() function is used here, in order to correctly handle decimal @Temporal_Distortion_Granularity_Step_Size values, when negatively distorting via a subtraction operand on this line of sourcecode...
			End
		Else If @Temporal_Distortion_Toolean_Vulcan = 1
			Begin
				Set @Hash_Seed_Vulcan = (Case When @Hash_Seed_Vulcan = 1 Then 0 Else Ceiling((Cast(@Hash_Seed_Vulcan As Decimal(38, 29)) + ((@Temporal_Distortion_Granularity_Step_Size / Cast(100000000 As Decimal(38, 29))) * Cast(@Hash_Seed_Vulcan As Decimal(38, 29))))) End) --We normalise the temproal distortion of the Hash Seed, by harmonising with the distance between the Hash Seed and its polar limit... The Ceiling() function is used here, in order to correctly handle decimal @Temporal_Distortion_Granularity_Step_Size values, when positively distorting via an addition operand on this line of sourcecode...
			End
		--3. Andorian Temporal Distortion
		If @Temporal_Distortion_Toolean_Andorian = -1
			Begin
				Set @Hash_Seed_Andorian = (Case When @Hash_Seed_Andorian = 1 Then 0 Else Floor((Cast(@Hash_Seed_Andorian As Decimal(38, 29)) - ((@Temporal_Distortion_Granularity_Step_Size / Cast(100000000 As Decimal(38, 29))) * Cast(@Hash_Seed_Andorian As Decimal(38, 29))))) End) --We normalise the temproal distortion of the Hash Seed, by harmonising with the distance between the Hash Seed and its polar limit... The Floor() function is used here, in order to correctly handle decimal @Temporal_Distortion_Granularity_Step_Size values, when negatively distorting via a subtraction operand on this line of sourcecode...
			End
		Else If @Temporal_Distortion_Toolean_Andorian = 1
			Begin
				Set @Hash_Seed_Andorian = (Case When @Hash_Seed_Andorian = 1 Then 0 Else Ceiling((Cast(@Hash_Seed_Andorian As Decimal(38, 29)) + ((@Temporal_Distortion_Granularity_Step_Size / Cast(100000000 As Decimal(38, 29))) * Cast(@Hash_Seed_Andorian As Decimal(38, 29))))) End) --We normalise the temproal distortion of the Hash Seed, by harmonising with the distance between the Hash Seed and its polar limit... The Ceiling() function is used here, in order to correctly handle decimal @Temporal_Distortion_Granularity_Step_Size values, when positively distorting via an addition operand on this line of sourcecode...
			End

		--Please note, that here below, I have set different temproal distortion modifiers for the three different Hash Seed distortions... This is highly advisable, given that the algorithm is not designed to work when any of the three Hash Seeds are identical!!!
		--Limit Modifier
		--(We here need to worry about modifying on the hash seed range limits, because it is assumed that a temporal distortion could cause all three hash seeds to clash onto either 1 or 100,000,000...)
		If @Hash_Seed_Terran = 1
			Begin
				If @Hash_Seed_Vulcan = 1
					Begin
						If @Hash_Seed_Andorian = 1
							Begin
								Set @Hash_Seed_Terran = 1
								Set @Hash_Seed_Vulcan = 2
								Set @Hash_Seed_Andorian = 3
							End
					End
			End
		Else If @Hash_Seed_Terran = 100000000
			Begin
				If @Hash_Seed_Vulcan = 100000000
					Begin
						If @Hash_Seed_Andorian = 100000000
							Begin
								Set @Hash_Seed_Terran = 99999998
								Set @Hash_Seed_Vulcan = 99999999
								Set @Hash_Seed_Andorian = 100000000
							End
					End
			End
		--Proximal Modifier
		Else If @Hash_Seed_Terran = @Hash_Seed_Vulcan
			Begin
				If @Hash_Seed_Andorian = @Hash_Seed_Vulcan
					Begin
						Set @Hash_Seed_Terran = (@Hash_Seed_Terran - 1)
						Set @Hash_Seed_Andorian = (@Hash_Seed_Andorian + 1)
					End
			End
		--Distal Terran Modifier
		Else If @Hash_Seed_Terran = @Hash_Seed_Vulcan
			Begin
				If @Hash_Seed_Andorian > @Hash_Seed_Terran
					Begin
						Set @Hash_Seed_Terran = (@Hash_Seed_Terran - 1)
					End
				Else If @Hash_Seed_Andorian < @Hash_Seed_Terran
					Begin
						Set @Hash_Seed_Terran = (@Hash_Seed_Terran + 1)
					End
			End
		--Distal Andorian Modifier
		Else If @Hash_Seed_Andorian = @Hash_Seed_Vulcan
			Begin
				If @Hash_Seed_Terran > @Hash_Seed_Andorian
					Begin
						Set @Hash_Seed_Andorian = (@Hash_Seed_Andorian - 1)
					End
				Else If @Hash_Seed_Terran < @Hash_Seed_Andorian
					Begin
						Set @Hash_Seed_Andorian = (@Hash_Seed_Andorian + 1)
					End
			End
		--Inverted Modifier
		Else If @Hash_Seed_Terran = @Hash_Seed_Andorian
			Begin
				If @Hash_Seed_Terran > @Hash_Seed_Vulcan
					Begin
						Set @Hash_Seed_Andorian = (@Hash_Seed_Andorian + 1)
					End
				Else If @Hash_Seed_Andorian < @Hash_Seed_Vulcan
					Begin
						Set @Hash_Seed_Terran = (@Hash_Seed_Terran - 1)
					End
			End
	End


--Hash_Value_Scaffold
Declare @Dynamic_SQL_Data_Intermediate_Variable_Hash_Value As Nvarchar(Max)
Set @Dynamic_SQL_Data_Intermediate_Variable_Hash_Value =
(
'Declare @Number_Seeds Table ([Number_Seed] NvarChar(1))
Insert Into @Number_Seeds ([Number_Seed])
Values (''0''), (''1''), (''2''), (''3''), (''4''), (''5''), (''6''), (''7''), (''8''), (''9'') ' +
Replace(dbo.Obsidian_Element_Index_Generator_Code_Parallel_Super_Fast(@Hash_Value_Length), '@Index_Count', @Hash_Value_Length) --This algorithm can be found on my GitHub account in the same repository that you found this script in.
)

Declare @Obsidian_Index_Scaffold_Hash_Value Table ([Index] Int)
Insert Into @Obsidian_Index_Scaffold_Hash_Value ([Index])
Execute (@Dynamic_SQL_Data_Intermediate_Variable_Hash_Value)


--Hash_Array_Scaffold
Declare @Dynamic_SQL_Data_Intermediate_Variable_Hash_Array As Nvarchar(Max)
Set @Dynamic_SQL_Data_Intermediate_Variable_Hash_Array =
(
'Declare @Number_Seeds Table ([Number_Seed] NvarChar(1))
Insert Into @Number_Seeds ([Number_Seed])
Values (''0''), (''1''), (''2''), (''3''), (''4''), (''5''), (''6''), (''7''), (''8''), (''9'') ' +
Replace(dbo.Obsidian_Element_Index_Generator_Code_Parallel_Super_Fast(@Hash_Array_Length), '@Index_Count', @Hash_Array_Length) --This algorithm can be found on my GitHub account in the same repository that you found this script in.
)

Declare @Obsidian_Index_Scaffold_Hash_Array Table ([Index] Int)
Insert Into @Obsidian_Index_Scaffold_Hash_Array ([Index])
Execute (@Dynamic_SQL_Data_Intermediate_Variable_Hash_Array)


--Hash_Generation
Declare @Pillars_Of_Starfleet Table ([Array_Index] Bigint, [Value_Index] Bigint, [Scrambled_Eggs_Benedict] Varchar(Max), [A_Tiny_Mush_Of_Vulcan_Flan] Decimal(38, 37), [A_Huge_Slice_Of_Andorian_Pie] Decimal(38, 37))
Insert Into @Pillars_Of_Starfleet ([Array_Index], [Value_Index], [Scrambled_Eggs_Benedict], [A_Tiny_Mush_Of_Vulcan_Flan], [A_Huge_Slice_Of_Andorian_Pie])
Select
	A.[Index] As [Array_Index],
	B.[Index] As [Value_Index],
	Reverse(Cast(((Cast(4 As Decimal(38, 37)) / ((8 * ((((A.[Index] - 1) * @Hash_Value_Length) + B.[Index]) + (@Hash_Seed_Terran - 1))) + 1))  - (Cast(2 As Decimal(38, 37)) / ((8 * ((((A.[Index] - 1) * @Hash_Value_Length) + B.[Index]) + (@Hash_Seed_Terran - 1))) + 4)) - (Cast(1 As Decimal(38, 37)) / ((8 * ((((A.[Index] - 1) * @Hash_Value_Length) + B.[Index]) + (@Hash_Seed_Terran - 1))) + 5)) - (Cast(1 As Decimal(38, 37)) / ((8 * ((((A.[Index] - 1) * @Hash_Value_Length) + B.[Index]) + (@Hash_Seed_Terran - 1))) + 6))) As Varchar(Max))) As [Scrambled_Eggs_Benedict], -- We calculate a deconstructed derivation, inspired by the Bailey–Borwein–Plouffe (BBP) Formula, for approximating Pi... Terrans appreciate scrambled eggs for brunch (It is used mainly as a hangover cure, along with a bloody mary, after the exploits of a night 'out on the town'... Plus, a 'famous prophet' of the never ending millenium, has declared that Canadians will probably be all the rage, in some significant manner, during the first space age race!!!)... It's been reversed, as a warning to the 21st century youth, that booze binges lead to beer belly battlegrounds, where your stomach fights for survival, and may not actually be able to hold down a meal...
	((Cast(4 As Decimal(38, 37)) / ((8 * ((((A.[Index] - 1) * @Hash_Value_Length) + B.[Index]) + (@Hash_Seed_Vulcan - 1))) + 1))  - (Cast(2 As Decimal(38, 37)) / ((8 * ((((A.[Index] - 1) * @Hash_Value_Length) + B.[Index]) + (@Hash_Seed_Vulcan - 1))) + 4)) - (Cast(1 As Decimal(38, 37)) / ((8 * ((((A.[Index] - 1) * @Hash_Value_Length) + B.[Index]) + (@Hash_Seed_Vulcan - 1))) + 5)) - (Cast(1 As Decimal(38, 37)) / ((8 * ((((A.[Index] - 1) * @Hash_Value_Length) + B.[Index]) + (@Hash_Seed_Vulcan - 1))) + 6))) As [A_Tiny_Mush_Of_Vulcan_Flan], -- We calculate a deconstructed derivation, inspired by the Bailey–Borwein–Plouffe (BBP) Formula, for approximating Pi... Vulcans don't really appreciate flan (It is used mainly as a penance during the rigours of Kolinahr!!!)...
	((Cast(4 As Decimal(38, 37)) / ((8 * ((((A.[Index] - 1) * @Hash_Value_Length) + B.[Index]) + (@Hash_Seed_Andorian - 1))) + 1))  - (Cast(2 As Decimal(38, 37)) / ((8 * ((((A.[Index] - 1) * @Hash_Value_Length) + B.[Index]) + (@Hash_Seed_Andorian - 1))) + 4)) - (Cast(1 As Decimal(38, 37)) / ((8 * ((((A.[Index] - 1) * @Hash_Value_Length) + B.[Index]) + (@Hash_Seed_Andorian - 1))) + 5)) - (Cast(1 As Decimal(38, 37)) / ((8 * ((((A.[Index] - 1) * @Hash_Value_Length) + B.[Index]) + (@Hash_Seed_Andorian - 1))) + 6))) As [A_Huge_Slice_Of_Andorian_Pie] -- We calculate a deconstructed derivation, inspired by the Bailey–Borwein–Plouffe (BBP) Formula, for approximating Pi... Andorians really appreciate pie (It is usually their main course in a meal!!!)...
From @Obsidian_Index_Scaffold_Hash_Array A
Cross Join @Obsidian_Index_Scaffold_Hash_Value B


--Hash_Serving
Select
	String_Agg(Sqrt(Square(Cast(Substring(Reverse(Cast(([A_Tiny_Mush_Of_Vulcan_Flan] - [A_Huge_Slice_Of_Andorian_Pie]) As Varchar(Max))), (Case When ([Value_Index] % @Hash_Shift) = 0 Then @Hash_Shift Else ([Value_Index] % @Hash_Shift) End), 1) As Tinyint))), '') Within Group (Order By [Scrambled_Eggs_Benedict] Asc) As [Firmament_Feast] --We can now serve a tasty pseudo-random integer meal... Please be aware that there is currently no particular order in which the courses and their constituents are brought together (which is one of the main strengths of the algorithm... of course... excuse the pun...)... As such, there may be some usecases or circumstances where this is unacceptable (Starfleet Standard Issue Blitz Rations don't exactly make the mouth water, eh???)... Here, we also use an index modulo shift technique, in order to increase the randomicit features and behaviours of the algorithm (It activates the Hash Shift control)... The core 'flan' minus 'pie' method here, basically dilates the combinatorial search space by the power of 10, such that you now have a double nested exponent on the overall complexity of the algorithm!!!...
From @Pillars_Of_Starfleet
Group By [Array_Index]

--And so the three insatiable Starfleet God's of Gluttony are born into the cosmos: 1. Haon the Father of the Terrans; 2. Divad the brother of the Vulcans; and 3. Susej the friend of the Andorians...